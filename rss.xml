<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>豌豆荚博客</title>
  
  
  <link href="/rss.xml" rel="self"/>
  
  <link href="http://lehoon.cn/"/>
  <updated>2018-11-28T09:13:26.548Z</updated>
  <id>http://lehoon.cn/</id>
  
  <author>
    <name>lehoon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OpenJdk1.8笔记--java启动流程</title>
    <link href="http://lehoon.cn/orther/2018/11/27/openjdk-startup-note.html"/>
    <id>http://lehoon.cn/orther/2018/11/27/openjdk-startup-note.html</id>
    <published>2018-11-27T06:03:49.000Z</published>
    <updated>2018-11-28T09:13:26.548Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录openjdk1.8 启动过程流程梳理。<br><a id="more"></a></p><h2 id="java启动"><a href="#java启动" class="headerlink" title="java启动"></a>java启动</h2><p>Jdk中java的入口函数文件为openjdk\jdk\src\share\bin\main.c中的main方法（window上为WinMain），然后调用jdk8u-dev/jdk/src/share/bin/java.c的JLI_Launch方法，启动一个jvm虚拟机；</p><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><p>作用：程序入口<br>位置：openjdk\jdk\src\share\bin\main.c<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Entry point.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//java虚拟机启动入口函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> JAVAW   <span class="comment">//window平台入口</span></span></span><br><span class="line"><span class="keyword">char</span> **__initenv;</span><br><span class="line"><span class="keyword">int</span> WINAPI</span><br><span class="line">WinMain(HINSTANCE inst, HINSTANCE previnst, LPSTR cmdline, <span class="keyword">int</span> cmdshow)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> margc;</span><br><span class="line">    <span class="keyword">char</span>** margv;</span><br><span class="line">    <span class="keyword">const</span> jboolean const_javaw = JNI_TRUE;</span><br><span class="line"></span><br><span class="line">    __initenv = _environ;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* JAVAW */</span>   <span class="comment">//linux平台入口函数</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> margc;   <span class="comment">//参数个数</span></span><br><span class="line">    <span class="keyword">char</span>** margv;  <span class="comment">//命令参数</span></span><br><span class="line">    <span class="keyword">const</span> jboolean const_javaw = JNI_FALSE;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _WIN32</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (getenv(JLDEBUG_ENV_ENTRY) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Windows original main args:\n"</span>);</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span> ; i &lt; __argc ; i++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"wwwd_args[%d] = %s\n"</span>, i, __argv[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    JLI_CmdToArgs(GetCommandLine());</span><br><span class="line">    margc = JLI_GetStdArgc();</span><br><span class="line">    <span class="comment">// add one more to mark the end</span></span><br><span class="line">    margv = (<span class="keyword">char</span> **)JLI_MemAlloc((margc + <span class="number">1</span>) * (<span class="keyword">sizeof</span>(<span class="keyword">char</span> *)));</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        StdArg *stdargs = JLI_GetStdArgs();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span> ; i &lt; margc ; i++) &#123;</span><br><span class="line">            margv[i] = stdargs[i].arg;</span><br><span class="line">        &#125;</span><br><span class="line">        margv[i] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* *NIXES */</span></span></span><br><span class="line">    margc = argc;</span><br><span class="line">    margv = argv;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* WIN32 */</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用JLI_Launch执行java的执行体逻辑，参考代码jdk8u-dev/jdk/src/share/bin/java.c</span></span><br><span class="line">    <span class="keyword">return</span> JLI_Launch(margc,  <span class="comment">//命令参数个数</span></span><br><span class="line">                   margv,     <span class="comment">//参数数组</span></span><br><span class="line">                   <span class="keyword">sizeof</span>(const_jargs) / <span class="keyword">sizeof</span>(<span class="keyword">char</span> *), <span class="comment">//java args参数个数 </span></span><br><span class="line">                   const_jargs,  <span class="comment">//java参数</span></span><br><span class="line">                   <span class="keyword">sizeof</span>(const_appclasspath) / <span class="keyword">sizeof</span>(<span class="keyword">char</span> *),  <span class="comment">//classpath 数量</span></span><br><span class="line">                   const_appclasspath, <span class="comment">//classpath数量</span></span><br><span class="line">                   FULL_VERSION, <span class="comment">//完整的版本号</span></span><br><span class="line">                   DOT_VERSION,  <span class="comment">//版本号</span></span><br><span class="line">                   (const_progname != <span class="literal">NULL</span>) ? const_progname : *margv, <span class="comment">//程序名称</span></span><br><span class="line">                   (const_launcher != <span class="literal">NULL</span>) ? const_launcher : *margv, <span class="comment">//启动器名称</span></span><br><span class="line">                   (const_jargs != <span class="literal">NULL</span>) ? JNI_TRUE : JNI_FALSE,  <span class="comment">//默认为0</span></span><br><span class="line">                   const_cpwildcard,  <span class="comment">//是否支持扩展classpath  默认为true</span></span><br><span class="line">                   const_javaw,  <span class="comment">//window下true， 其他false</span></span><br><span class="line">                   const_ergo_class);<span class="comment">//运行模式  默认为DEFAULT_POLICY=0  其他包括NEVER_SERVER_CLASS、ALWAYS_SERVER_CLASS</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="JLI-Launch"><a href="#JLI-Launch" class="headerlink" title="JLI_Launch"></a>JLI_Launch</h3><p>作用：java入口函数，解析参数、创建环境、加载jvm动态库<br>位置：jdk8u-dev/jdk/src/share/bin/java.c<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Entry point. java的入口函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">JLI_Launch(<span class="keyword">int</span> argc, <span class="keyword">char</span> ** argv,              <span class="comment">/* main argc, argc */</span></span><br><span class="line">        <span class="keyword">int</span> jargc, <span class="keyword">const</span> <span class="keyword">char</span>** jargv,          <span class="comment">/* java args */</span></span><br><span class="line">        <span class="keyword">int</span> appclassc, <span class="keyword">const</span> <span class="keyword">char</span>** appclassv,  <span class="comment">/* app classpath */</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* fullversion,                <span class="comment">/* full version defined */</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* dotversion,                 <span class="comment">/* dot version defined */</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* pname,                      <span class="comment">/* program name */</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* lname,                      <span class="comment">/* launcher name */</span></span><br><span class="line">        jboolean javaargs,                      <span class="comment">/* JAVA_ARGS */</span></span><br><span class="line">        jboolean cpwildcard,                    <span class="comment">/* classpath wildcard*/</span></span><br><span class="line">        jboolean javaw,                         <span class="comment">/* windows-only javaw */</span></span><br><span class="line">        jint ergo                               <span class="comment">/* ergonomics class policy */</span></span><br><span class="line">)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> mode = LM_UNKNOWN; <span class="comment">//启动模式  默认为0   其他参考：java.h 中LaunchMode枚举定义</span></span><br><span class="line">    <span class="keyword">char</span> *what = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">char</span> *cpath = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> *main_class = <span class="literal">NULL</span>;    <span class="comment">//带有main函数的class文件</span></span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    InvocationFunctions ifn;   <span class="comment">//函数指针结构体包括：创建jvm、获取jvm启动参数、获取创建的jvm</span></span><br><span class="line">    jlong start, end;          <span class="comment">//启动结束时间</span></span><br><span class="line">    <span class="keyword">char</span> jvmpath[MAXPATHLEN];   <span class="comment">//jvm路径</span></span><br><span class="line">    <span class="keyword">char</span> jrepath[MAXPATHLEN];   <span class="comment">//jre路径</span></span><br><span class="line">    <span class="keyword">char</span> jvmcfg[MAXPATHLEN];    <span class="comment">//jvm配置</span></span><br><span class="line"></span><br><span class="line">    _fVersion = fullversion;</span><br><span class="line">    _dVersion = dotversion;</span><br><span class="line">    _launcher_name = lname;</span><br><span class="line">    _program_name = pname;</span><br><span class="line">    _is_java_args = javaargs;</span><br><span class="line">    _wc_enabled = cpwildcard;</span><br><span class="line">    _ergo_policy = ergo;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化启动器，window下注册启动异常时弹出ui选择调试器</span></span><br><span class="line">    InitLauncher(javaw);</span><br><span class="line">    DumpState(); <span class="comment">//判断是否定义环境变量_JAVA_LAUNCHER_DEBUG，是的话打印调试信息</span></span><br><span class="line">    <span class="keyword">if</span> (JLI_IsTraceLauncher()) &#123;  <span class="comment">//打印命令行参数</span></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Command line args:\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; argc ; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"argv[%d] = %s\n"</span>, i, argv[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//增加配置参数</span></span><br><span class="line">        AddOption(<span class="string">"-Dsun.java.launcher.diag=true"</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * There are three things to note about the SelectVersion() routine:</span></span><br><span class="line"><span class="comment">     *  1) If the version running isn't correct, this routine doesn't</span></span><br><span class="line"><span class="comment">     *     return (either the correct version has been exec'd or an error</span></span><br><span class="line"><span class="comment">     *     was issued).</span></span><br><span class="line"><span class="comment">     *  2) Argc and Argv in this scope are *not* altered by this routine.</span></span><br><span class="line"><span class="comment">     *     It is the responsibility of subsequent code to ignore the</span></span><br><span class="line"><span class="comment">     *     arguments handled by this routine.</span></span><br><span class="line"><span class="comment">     *  3) As a side-effect, the variable "main_class" is guaranteed to</span></span><br><span class="line"><span class="comment">     *     be set (if it should ever be set).  This isn't exactly the</span></span><br><span class="line"><span class="comment">     *     poster child for structured programming, but it is a small</span></span><br><span class="line"><span class="comment">     *     price to pay for not processing a jar file operand twice.</span></span><br><span class="line"><span class="comment">     *     (Note: This side effect has been disabled.  See comment on</span></span><br><span class="line"><span class="comment">     *     bugid 5030265 below.)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//选择合适版本的jre，可以从jar包中读取META-INF/MAINFEST.MF中获取</span></span><br><span class="line">    <span class="comment">//查看mian_class</span></span><br><span class="line">    SelectVersion(argc, argv, &amp;main_class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建执行环境</span></span><br><span class="line">    CreateExecutionEnvironment(&amp;argc, </span><br><span class="line">                               &amp;argv,</span><br><span class="line">                               jrepath, </span><br><span class="line">                               <span class="keyword">sizeof</span>(jrepath),</span><br><span class="line">                               jvmpath, </span><br><span class="line">                               <span class="keyword">sizeof</span>(jvmpath),</span><br><span class="line">                               jvmcfg,  </span><br><span class="line">                               <span class="keyword">sizeof</span>(jvmcfg));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始设置函数指针为无效指针</span></span><br><span class="line">    ifn.CreateJavaVM = <span class="number">0</span>;</span><br><span class="line">    ifn.GetDefaultJavaVMInitArgs = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果时debug的话，记录启动时间</span></span><br><span class="line">    <span class="keyword">if</span> (JLI_IsTraceLauncher()) &#123;</span><br><span class="line">        start = CounterGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载java vm虚拟机</span></span><br><span class="line">    <span class="comment">//加载jvmpath(jdk/lib/amd64/server/libjvm.so)，并初始化jvm的指针</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *   获取动态库中的JNI_CreateJavaVM、JNI_GetDefaultJavaVMInitArgs、JNI_GetCreatedJavaVMs入口地址</span></span><br><span class="line"><span class="comment">    *   填充到ifn结构体中</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (!LoadJavaVM(jvmpath, &amp;ifn)) &#123;</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//debug模式下记录加载java vm虚拟机时间</span></span><br><span class="line">    <span class="keyword">if</span> (JLI_IsTraceLauncher()) &#123;</span><br><span class="line">        end   = CounterGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印加载javavm时间</span></span><br><span class="line">    JLI_TraceLauncher(<span class="string">"%ld micro seconds to LoadJavaVM\n"</span>,</span><br><span class="line">             (<span class="keyword">long</span>)(jint)Counter2Micros(end-start));</span><br><span class="line"></span><br><span class="line">    ++argv;</span><br><span class="line">    --argc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否有参数</span></span><br><span class="line">    <span class="keyword">if</span> (IsJavaArgs()) &#123;</span><br><span class="line">        <span class="comment">/* 解析参数 */</span></span><br><span class="line">        TranslateApplicationArgs(jargc, jargv, &amp;argc, &amp;argv);</span><br><span class="line">        <span class="keyword">if</span> (!AddApplicationOptions(appclassc, appclassv)) &#123;</span><br><span class="line">            <span class="keyword">return</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* 设置环境变量中的classpath路径 */</span></span><br><span class="line">        cpath = getenv(<span class="string">"CLASSPATH"</span>);</span><br><span class="line">        <span class="keyword">if</span> (cpath == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            cpath = <span class="string">"."</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SetClassPath(cpath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 解析命令行参数，如果解析失败则程序退出.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (!ParseArguments(&amp;argc, &amp;argv, &amp;mode, &amp;what, &amp;ret, jrepath)) &#123;</span><br><span class="line">        <span class="keyword">return</span>(ret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 如果-jar参数指定的话，重写classpath值 */</span></span><br><span class="line">    <span class="keyword">if</span> (mode == LM_JAR) &#123;</span><br><span class="line">        SetClassPath(what);     <span class="comment">/* Override class path */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* set the -Dsun.java.command pseudo property */</span></span><br><span class="line">    SetJavaCommandLineProp(what, argc, argv);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Set the -Dsun.java.launcher pseudo property */</span></span><br><span class="line">    SetJavaLauncherProp();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* set the -Dsun.java.launcher.* platform properties */</span></span><br><span class="line">    SetJavaLauncherPlatformProps();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进行一系列处理，最终创建一个jvm的虚拟机并条用int JNICALL JavaMain(void * _args);运行入口函数</span></span><br><span class="line">    <span class="keyword">return</span> JVMInit(&amp;ifn, threadStackSize, argc, argv, mode, what, ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="JVMInit"><a href="#JVMInit" class="headerlink" title="JVMInit"></a>JVMInit</h3><p>作用：显示启动画面，执行虚拟机入口函数<br>位置：jdk8u-dev/jdk/src/solaris/bin/java_md_solinux.c<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">JVMInit(InvocationFunctions* ifn, <span class="comment">//函数指针</span></span><br><span class="line">        jlong threadStackSize,    <span class="comment">//线程栈大小   在AddOption函数中修改全局的threadStackSize变量值，通过-Xss修改</span></span><br><span class="line">        <span class="keyword">int</span> argc,                 <span class="comment">//参数数目</span></span><br><span class="line">        <span class="keyword">char</span> **argv,              <span class="comment">//参数</span></span><br><span class="line">        <span class="keyword">int</span> mode,                 <span class="comment">//模式</span></span><br><span class="line">        <span class="keyword">char</span> *what,               <span class="comment">//</span></span><br><span class="line">        <span class="keyword">int</span> ret)                  <span class="comment">//返回值</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//根据存储在环境变量中的jar文件名和镜像文件名显示启动画面</span></span><br><span class="line">    ShowSplashScreen();</span><br><span class="line">    <span class="comment">//创建线程执行代码逻辑</span></span><br><span class="line">    <span class="keyword">return</span> ContinueInNewThread(ifn, threadStackSize, argc, argv, mode, what, ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="ContinueInNewThread"><a href="#ContinueInNewThread" class="headerlink" title="ContinueInNewThread"></a>ContinueInNewThread</h3><p>作用：组织参数，执行真正的虚拟机入口函数<br>位置：jdk8u-dev/jdk/src/share/bin/java.c<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">ContinueInNewThread(InvocationFunctions* ifn, <span class="comment">//函数指针</span></span><br><span class="line">                    jlong threadStackSize,    <span class="comment">//线程栈大小</span></span><br><span class="line">                    <span class="keyword">int</span> argc, </span><br><span class="line">                    <span class="keyword">char</span> **argv,</span><br><span class="line">                    <span class="keyword">int</span> mode, </span><br><span class="line">                    <span class="keyword">char</span> *what, </span><br><span class="line">                    <span class="keyword">int</span> ret)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 如果没有指定线程栈大小， 则会检查vm是否指定一个默认值.</span></span><br><span class="line"><span class="comment">     * 注意：虚拟机不再支持1.1，但是他会通过初始化参数返回一个默认的栈大小值.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (threadStackSize == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">JDK1_1InitArgs</span> <span class="title">args1_1</span>;</span></span><br><span class="line">      <span class="built_in">memset</span>((<span class="keyword">void</span>*)&amp;args1_1, <span class="number">0</span>, <span class="keyword">sizeof</span>(args1_1));</span><br><span class="line">      <span class="comment">//指定版本号</span></span><br><span class="line">      args1_1.version = JNI_VERSION_1_1;</span><br><span class="line">      <span class="comment">//通过虚拟机返回一个指定的参数值，该方法时从libjvm.so里面导出的函数指针</span></span><br><span class="line">      ifn-&gt;GetDefaultJavaVMInitArgs(&amp;args1_1);  <span class="comment">/* 忽略返回值 */</span></span><br><span class="line">      <span class="keyword">if</span> (args1_1.javaStackSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="comment">//如果查询到有效值，则会修改全局定义的栈大小</span></span><br><span class="line">         threadStackSize = args1_1.javaStackSize;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* 创建一个新线程去创建jvm，然后调用main方法*/</span></span><br><span class="line">      JavaMainArgs args;</span><br><span class="line">      <span class="keyword">int</span> rslt;</span><br><span class="line"></span><br><span class="line">      args.argc = argc;</span><br><span class="line">      args.argv = argv;</span><br><span class="line">      args.mode = mode;</span><br><span class="line">      args.what = what;</span><br><span class="line">      args.ifn = *ifn;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**/</span></span><br><span class="line">      rslt = ContinueInNewThread0(JavaMain, threadStackSize, (<span class="keyword">void</span>*)&amp;args);</span><br><span class="line">      <span class="comment">/* If the caller has deemed there is an error we</span></span><br><span class="line"><span class="comment">       * simply return that, otherwise we return the value of</span></span><br><span class="line"><span class="comment">       * the callee</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">return</span> (ret != <span class="number">0</span>) ? ret : rslt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="ContinueInNewThread0"><a href="#ContinueInNewThread0" class="headerlink" title="ContinueInNewThread0"></a>ContinueInNewThread0</h3><p>作用：尝试创建新线程执行代码逻辑，创建新线程失败则在当前线程执行代码逻辑<br>位置：jdk8u-dev/jdk/src/solaris/bin/java_md_solinux.c<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 暂停当前线程，然后继续执行一个新的线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">ContinueInNewThread0(<span class="keyword">int</span> (JNICALL *continuation)(<span class="keyword">void</span> *), <span class="comment">//线程入口函数，在这里具体执行的时JavaMain方法</span></span><br><span class="line">                          jlong stack_size,               <span class="comment">//线程栈大小，会使用该值创建线程</span></span><br><span class="line">                          <span class="keyword">void</span> * args) &#123;                  <span class="comment">//参数</span></span><br><span class="line">    <span class="keyword">int</span> rslt;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __linux__                                          <span class="comment">//linux代码块</span></span></span><br><span class="line">    pthread_t tid;</span><br><span class="line">    pthread_attr_t attr;</span><br><span class="line">    pthread_attr_init(&amp;attr);</span><br><span class="line">    pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_JOINABLE);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">if</span> (stack_size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      pthread_attr_setstacksize(&amp;attr, stack_size);       <span class="comment">//如果给定的线程栈大小值有效，则设置创建线程的栈大小，否则使用默认值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 调用线程库创建线程，并设定入口函数为JavaMain */</span></span><br><span class="line">    <span class="built_in">if</span> (pthread_create(&amp;tid, &amp;attr, (<span class="keyword">void</span> *(*)(<span class="keyword">void</span>*))continuation, (<span class="keyword">void</span>*)args) == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">void</span> * tmp;</span><br><span class="line">      pthread_join(tid, &amp;tmp);                            <span class="comment">//创建成功后，并等待线程的结束，主线程挂起</span></span><br><span class="line">      rslt = (<span class="keyword">int</span>)tmp;</span><br><span class="line">    &#125; <span class="built_in">else</span> &#123;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * 如果因为某些条件导致创建线程失败，则在当前线程执行JavaMain方法</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      rslt = continuation(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pthread_attr_destroy(&amp;attr);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* ! __linux__ */</span>                                   <span class="comment">//solaris系统</span></span></span><br><span class="line">    thread_t tid;</span><br><span class="line">    <span class="keyword">long</span> flags = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">if</span> (thr_create(NULL, stack_size, (<span class="keyword">void</span> *(*)(<span class="keyword">void</span> *))continuation, args, flags, &amp;tid) == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">void</span> * tmp;</span><br><span class="line">      thr_join(tid, NULL, &amp;tmp);</span><br><span class="line">      rslt = (<span class="keyword">int</span>)tmp;</span><br><span class="line">    &#125; <span class="built_in">else</span> &#123;</span><br><span class="line">      <span class="comment">/* See above. Continue in current thread if thr_create() failed */</span></span><br><span class="line">      rslt = continuation(args);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __linux__ */</span></span></span><br><span class="line">    <span class="built_in">return</span> rslt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="JavaMain"><a href="#JavaMain" class="headerlink" title="JavaMain"></a>JavaMain</h3><p>作用：虚拟机的入口函数<br>位置：jdk8u-dev/jdk/src/share/bin/java.c<br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> JNICALL</span><br><span class="line">JavaMain(void * _args)</span><br><span class="line">&#123;</span><br><span class="line">    JavaMainArgs *args = (JavaMainArgs *)_args;         <span class="comment">//获取参数</span></span><br><span class="line">    <span class="keyword">int</span> argc = args-&gt;argc;</span><br><span class="line">    <span class="keyword">char</span> **argv = args-&gt;argv;</span><br><span class="line">    <span class="keyword">int</span> mode = args-&gt;mode;</span><br><span class="line">    <span class="keyword">char</span> *what = args-&gt;what;</span><br><span class="line">    InvocationFunctions ifn = args-&gt;ifn;                <span class="comment">//当前虚拟机导致的函数指针</span></span><br><span class="line">                                                        <span class="comment">//该机制可以保证同一环境配置多个jdk版本</span></span><br><span class="line"></span><br><span class="line">    JavaVM *vm = <span class="number">0</span>;</span><br><span class="line">    JNIEnv *env = <span class="number">0</span>;</span><br><span class="line">    jclass mainClass = <span class="keyword">NULL</span>;                            <span class="comment">//main函数class</span></span><br><span class="line">    jclass appClass = <span class="keyword">NULL</span>;                             <span class="comment">// 正在启动的实际应用程序类</span></span><br><span class="line">    jmethodID mainID;</span><br><span class="line">    jobjectArray mainArgs;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    jlong start, end;</span><br><span class="line"></span><br><span class="line">    RegisterThread();                                   <span class="comment">//window/类unix为空实现，macos特别处理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化虚拟机 */</span></span><br><span class="line">    start = CounterGet();</span><br><span class="line">    <span class="keyword">if</span> (!InitializeJVM(&amp;vm, &amp;env, &amp;ifn)) &#123;              <span class="comment">//初始化虚拟机，通过调用libvm.so</span></span><br><span class="line">                                                        <span class="comment">//导出的CreateJavaVM执行真正的</span></span><br><span class="line">                                                        <span class="comment">//创建虚拟机逻辑，最主要的时把env绑定到具体的jvm上</span></span><br><span class="line">                                                        <span class="comment">//后续的操作都是通过JNIEnv实现的</span></span><br><span class="line">        JLI_ReportErrorMessage(JVM_ERROR1);</span><br><span class="line">        <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (showSettings != <span class="keyword">NULL</span>) &#123;</span><br><span class="line">        ShowSettings(env, showSettings);</span><br><span class="line">        CHECK_EXCEPTION_LEAVE(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (printVersion || showVersion) &#123;</span><br><span class="line">        PrintJavaVersion(env, showVersion);</span><br><span class="line">        CHECK_EXCEPTION_LEAVE(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (printVersion) &#123;</span><br><span class="line">            LEAVE();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 如果没有指定class或者jar，则直接退出 */</span></span><br><span class="line">    <span class="keyword">if</span> (printXUsage || printUsage || what == <span class="number">0</span> || mode == LM_UNKNOWN) &#123;</span><br><span class="line">        PrintUsage(env, printXUsage);</span><br><span class="line">        CHECK_EXCEPTION_LEAVE(<span class="number">1</span>);</span><br><span class="line">        LEAVE();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FreeKnownVMs();  <span class="comment">/* after last possible PrintUsage() */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 记录初始化jvm时间 */</span></span><br><span class="line">    <span class="keyword">if</span> (JLI_IsTraceLauncher()) &#123;</span><br><span class="line">        end = CounterGet();</span><br><span class="line">        JLI_TraceLauncher(<span class="string">"%ld micro seconds to InitializeJVM\n"</span>,</span><br><span class="line">               (<span class="keyword">long</span>)(jint)Counter2Micros(end-start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 接下来，从argv获取应用的参数，打印参数 */</span></span><br><span class="line">    <span class="keyword">if</span> (JLI_IsTraceLauncher())&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        printf(<span class="string">"%s is '%s'\n"</span>, launchModeNames[mode], what);</span><br><span class="line">        printf(<span class="string">"App's argc is %d\n"</span>, argc);</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; argc; i++) &#123;</span><br><span class="line">            printf(<span class="string">"    argv[%2d] = '%s'\n"</span>, i, argv[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Get the application's main class.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * See bugid 5030265.  The Main-Class name has already been parsed</span></span><br><span class="line"><span class="comment">     * from the manifest, but not parsed properly for UTF-8 support.</span></span><br><span class="line"><span class="comment">     * Hence the code here ignores the value previously extracted and</span></span><br><span class="line"><span class="comment">     * uses the pre-existing code to reextract the value.  This is</span></span><br><span class="line"><span class="comment">     * possibly an end of release cycle expedient.  However, it has</span></span><br><span class="line"><span class="comment">     * also been discovered that passing some character sets through</span></span><br><span class="line"><span class="comment">     * the environment has "strange" behavior on some variants of</span></span><br><span class="line"><span class="comment">     * Windows.  Hence, maybe the manifest parsing code local to the</span></span><br><span class="line"><span class="comment">     * launcher should never be enhanced.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Hence, future work should either:</span></span><br><span class="line"><span class="comment">     *     1)   Correct the local parsing code and verify that the</span></span><br><span class="line"><span class="comment">     *          Main-Class attribute gets properly passed through</span></span><br><span class="line"><span class="comment">     *          all environments,</span></span><br><span class="line"><span class="comment">     *     2)   Remove the vestages of maintaining main_class through</span></span><br><span class="line"><span class="comment">     *          the environment (and remove these comments).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * This method also correctly handles launching existing JavaFX</span></span><br><span class="line"><span class="comment">     * applications that may or may not have a Main-Class manifest entry.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 加载Main class */</span></span><br><span class="line">    mainClass = LoadMainClass(env, mode, what);</span><br><span class="line">    <span class="comment">/* 检查是否指定main class， 不存在则退出虚拟机*/</span></span><br><span class="line">    CHECK_EXCEPTION_NULL_LEAVE(mainClass);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * In some cases when launching an application that needs a helper, e.g., a</span></span><br><span class="line"><span class="comment">     * JavaFX application with no main method, the mainClass will not be the</span></span><br><span class="line"><span class="comment">     * applications own main class but rather a helper class. To keep things</span></span><br><span class="line"><span class="comment">     * consistent in the UI we need to track and report the application main class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/* 获取应用的class文件 */</span></span><br><span class="line">    appClass = GetApplicationClass(env);</span><br><span class="line">    <span class="comment">/* 检查是否指定app class， 不存在返回-1 */</span></span><br><span class="line">    NULL_CHECK_RETURN_VALUE(appClass, <span class="number">-1</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * PostJVMInit uses the class name as the application name for GUI purposes,</span></span><br><span class="line"><span class="comment">     * for example, on OSX this sets the application name in the menu bar for</span></span><br><span class="line"><span class="comment">     * both SWT and JavaFX. So we'll pass the actual application class here</span></span><br><span class="line"><span class="comment">     * instead of mainClass as that may be a launcher or helper class instead</span></span><br><span class="line"><span class="comment">     * of the application class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*window和类unix为空实现，在macos下设定gui程序的程序名称*/</span></span><br><span class="line">    PostJVMInit(env, appClass, vm);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * The LoadMainClass not only loads the main class, it will also ensure</span></span><br><span class="line"><span class="comment">     * that the main method's signature is correct, therefore further checking</span></span><br><span class="line"><span class="comment">     * is not required. The main method is invoked here so that extraneous java</span></span><br><span class="line"><span class="comment">     * stacks are not in the application stack trace.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*从mainclass中加载静态main方法*/</span></span><br><span class="line">    mainID = (*env)-&gt;GetStaticMethodID(env, mainClass, <span class="string">"main"</span>,</span><br><span class="line">                                       <span class="string">"([Ljava/lang/String;)V"</span>);</span><br><span class="line">    CHECK_EXCEPTION_NULL_LEAVE(mainID);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Build platform specific argument array */</span></span><br><span class="line">    mainArgs = CreateApplicationArgs(env, argv, argc);</span><br><span class="line">    CHECK_EXCEPTION_NULL_LEAVE(mainArgs);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Invoke main method. */</span></span><br><span class="line">    <span class="comment">/* 调用main方法，并把参数传递过去 */</span></span><br><span class="line">    (*env)-&gt;CallStaticVoidMethod(env, mainClass, mainID, mainArgs);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * The launcher's exit code (in the absence of calls to</span></span><br><span class="line"><span class="comment">     * System.exit) will be non-zero if main threw an exception.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ret = (*env)-&gt;ExceptionOccurred(env) == <span class="keyword">NULL</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">    LEAVE();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="InitializeJVM"><a href="#InitializeJVM" class="headerlink" title="InitializeJVM"></a>InitializeJVM</h3><p>作用：通过libvm.so导出的函数创建虚拟机并和JNIEnv绑定<br>位置：jdk8u-dev/jdk/src/share/bin/java.c<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 初始化java虚拟机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">static jboolean</span><br><span class="line">InitializeJVM(JavaVM **pvm,               <span class="comment">//虚拟机指针</span></span><br><span class="line">              JNIEnv **penv,              <span class="comment">//JNIEnv指针</span></span><br><span class="line">              InvocationFunctions *ifn)   <span class="comment">//导出的函数指针</span></span><br><span class="line">&#123;</span><br><span class="line">    JavaVMInitArgs <span class="keyword">args</span>;</span><br><span class="line">    jint r;</span><br><span class="line"></span><br><span class="line">    memset(&amp;<span class="keyword">args</span>, 0, sizeof(<span class="keyword">args</span>));</span><br><span class="line">    <span class="keyword">args</span>.<span class="keyword">version</span>  = JNI_VERSION_1_2;      <span class="comment">//指定jni版本号</span></span><br><span class="line">    <span class="keyword">args</span>.nOptions = numOptions;</span><br><span class="line">    <span class="keyword">args</span>.options  = options;</span><br><span class="line">    <span class="keyword">args</span>.ignoreUnrecognized = JNI_FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (JLI_IsTraceLauncher()) &#123;          <span class="comment">//打印参数</span></span><br><span class="line">        int i = 0;</span><br><span class="line">        printf(<span class="string">"JavaVM args:\n    "</span>);</span><br><span class="line">        printf(<span class="string">"version 0x%08lx, "</span>, (long)<span class="keyword">args</span>.<span class="keyword">version</span>);</span><br><span class="line">        printf(<span class="string">"ignoreUnrecognized is %s, "</span>,</span><br><span class="line">               <span class="keyword">args</span>.ignoreUnrecognized ? <span class="string">"JNI_TRUE"</span> : <span class="string">"JNI_FALSE"</span>);</span><br><span class="line">        printf(<span class="string">"nOptions is %ld\n"</span>, (long)<span class="keyword">args</span>.nOptions);</span><br><span class="line">        <span class="keyword">for</span> (i = 0; i &lt; numOptions; i++)</span><br><span class="line">            printf(<span class="string">"    option[%2d] = '%s'\n"</span>,</span><br><span class="line">                   i, <span class="keyword">args</span>.options[i].optionString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建java虚拟机，并和JNIEnv绑定 */</span></span><br><span class="line">    r = ifn-&gt;CreateJavaVM(pvm, (void **)penv, &amp;<span class="keyword">args</span>);</span><br><span class="line">    <span class="comment">/* 释放参数内存 */</span></span><br><span class="line">    JLI_MemFree(options);</span><br><span class="line">    <span class="comment">/* 返回创建结果 */</span></span><br><span class="line">    <span class="keyword">return</span> r == JNI_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="JNI-CreateJavaVM"><a href="#JNI-CreateJavaVM" class="headerlink" title="JNI_CreateJavaVM"></a>JNI_CreateJavaVM</h3><p>作用：创建java虚拟机<br>位置：jdk8u-dev/hotspot/src/share/vm/prims/jni.cpp<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 导出JNI_CreateJavaVM函数 */</span></span><br><span class="line">_JNI_IMPORT_OR_EXPORT_ jint JNICALL JNI_CreateJavaVM(JavaVM **vm, <span class="literal">void</span> **penv, <span class="literal">void</span> *args) &#123;</span><br><span class="line">#ifndef USDT2</span><br><span class="line">  HS_DTRACE_PROBE3(hotspot_jni, CreateJavaVM__entry, vm, penv, args);</span><br><span class="line">#else <span class="comment">/* USDT2 */</span></span><br><span class="line">  HOTSPOT_JNI_CREATEJAVAVM_ENTRY(</span><br><span class="line">                                 (<span class="literal">void</span> **) vm, penv, args);</span><br><span class="line">#endif <span class="comment">/* USDT2 */</span></span><br><span class="line"></span><br><span class="line">  jint result = JNI_ERR;</span><br><span class="line">  DT_RETURN_MARK(CreateJavaVM, jint, (const jint&amp;)result);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We're about to use Atomic::xchg for synchronization.  Some Zero</span></span><br><span class="line">  <span class="comment">// platforms use the GCC builtin __sync_lock_test_and_set for this,</span></span><br><span class="line">  <span class="comment">// but __sync_lock_test_and_set is not guaranteed to do what we want</span></span><br><span class="line">  <span class="comment">// on all architectures.  So we check it works before relying on it.</span></span><br><span class="line">#if defined(ZERO) &amp;&amp; defined(ASSERT)</span><br><span class="line">  &#123;</span><br><span class="line">    jint a = <span class="number">0xcafebabe</span>;</span><br><span class="line">    jint b = Atomic<span class="type">::xchg</span>(<span class="number">0xdeadbeef</span>, &amp;a);</span><br><span class="line">    <span class="literal">void</span> *c = &amp;a;</span><br><span class="line">    <span class="literal">void</span> *d = Atomic<span class="type">::xchg_ptr</span>(&amp;b, &amp;c);</span><br><span class="line">    assert(a == (jint) <span class="number">0xdeadbeef</span> &amp;&amp; b == (jint) <span class="number">0xcafebabe</span>, <span class="string">"Atomic::xchg() works"</span>);</span><br><span class="line">    assert(c == &amp;b &amp;&amp; d == &amp;a, <span class="string">"Atomic::xchg_ptr() works"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">#endif <span class="comment">// ZERO &amp;&amp; ASSERT</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// At the moment it's only possible to have one Java VM,</span></span><br><span class="line">  <span class="comment">// since some of the runtime state is in global variables.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// We cannot use our mutex locks here, since they only work on</span></span><br><span class="line">  <span class="comment">// Threads. We do an atomic compare and exchange to ensure only</span></span><br><span class="line">  <span class="comment">// one thread can call this method at a time</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// We use Atomic::xchg rather than Atomic::add/dec since on some platforms</span></span><br><span class="line">  <span class="comment">// the add/dec implementations are dependent on whether we are running</span></span><br><span class="line">  <span class="comment">// on a multiprocessor, and at this stage of initialization the os::is_MP</span></span><br><span class="line">  <span class="comment">// function used to determine this will always return false. Atomic::xchg</span></span><br><span class="line">  <span class="comment">// does not have this problem.</span></span><br><span class="line">  <span class="keyword">if</span> (Atomic<span class="type">::xchg</span>(<span class="number">1</span>, &amp;vm_created) == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> JNI_EEXIST;   <span class="comment">// already created, or create attempt in progress</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (Atomic<span class="type">::xchg</span>(<span class="number">0</span>, &amp;safe_to_recreate_vm) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> JNI_ERR;  <span class="comment">// someone tried and failed and retry not allowed.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  assert(vm_created == <span class="number">1</span>, <span class="string">"vm_created is true during the creation"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 初始化期间的某些错误是可恢复的，并且不会阻止稍后再次调用此方法（可能使用不同的参数）。 </span></span><br><span class="line"><span class="comment">  * 但是，在初始化期间的某个时刻如果发生错误，我们不能再次调用此函数（否则它将崩溃）。 </span></span><br><span class="line"><span class="comment">  * 在这些情况下，ccan_try_again标志设置为false，它将 safe_to_recreate_vm 原子地设置为1，</span></span><br><span class="line"><span class="comment">  * 这样任何对JNI_CreateJavaVM的新调用都将立即使用上述逻辑失败。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  bool can_try_again = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 创建java虚拟机 */</span></span><br><span class="line">  result = Threads<span class="type">::create_vm</span>((JavaVMInitArgs*) args, &amp;can_try_again);</span><br><span class="line">  <span class="keyword">if</span> (result == JNI_OK) &#123;</span><br><span class="line">    JavaThread *<span class="keyword">thread</span> = JavaThread<span class="type">::current</span>();</span><br><span class="line">    <span class="comment">/* thread is thread_in_vm here */</span></span><br><span class="line">    <span class="comment">/* 获取vm对象，从全局的main_vm赋值 */</span></span><br><span class="line">    *vm = (JavaVM *)(&amp;main_vm);</span><br><span class="line">    <span class="comment">/* 获取线程jni环境指针 */</span></span><br><span class="line">    *(JNIEnv**) penv = <span class="keyword">thread</span>-&gt;jni_environment();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tracks the time application was running before GC</span></span><br><span class="line">    <span class="comment">// 记录程序启动时间，跟从应用程序在gc前的运行时间</span></span><br><span class="line">    RuntimeService<span class="type">::record_application_start</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Notify JVMTI</span></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="keyword">if</span> (JvmtiExport<span class="type">::should_post_thread_life</span>()) &#123;</span><br><span class="line">       JvmtiExport<span class="type">::post_thread_start</span>(<span class="keyword">thread</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    EventThreadStart event;</span><br><span class="line">    <span class="keyword">if</span> (event.should_commit()) &#123;</span><br><span class="line">      event.set_javalangthread(java_lang_Thread<span class="type">::thread_id</span>(<span class="keyword">thread</span>-&gt;threadObj()));</span><br><span class="line">      event.commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">#ifndef PRODUCT</span><br><span class="line">  #ifndef TARGET_OS_FAMILY_windows</span><br><span class="line">    #define CALL_TEST_FUNC_WITH_WRAPPER_IF_NEEDED(f) f()</span><br><span class="line">  #endif</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if we should compile all classes on bootclasspath</span></span><br><span class="line">    <span class="keyword">if</span> (CompileTheWorld) ClassLoader<span class="type">::compile_the_world</span>();</span><br><span class="line">    <span class="keyword">if</span> (ReplayCompiles) ciReplay<span class="type">::replay</span>(<span class="keyword">thread</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Some platforms (like Win*) need a wrapper around these test</span></span><br><span class="line">    <span class="comment">// functions in order to properly handle error conditions.</span></span><br><span class="line">    CALL_TEST_FUNC_WITH_WRAPPER_IF_NEEDED(test_error_handler);</span><br><span class="line">    CALL_TEST_FUNC_WITH_WRAPPER_IF_NEEDED(execute_internal_vm_tests);</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Since this is not a JVM_ENTRY we have to set the thread state manually before leaving.</span></span><br><span class="line">    ThreadStateTransition<span class="type">::transition_and_fence</span>(<span class="keyword">thread</span>, _thread_in_vm, _thread_in_native);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* 创建失败，如果允许重试，则修改safe_to_recreate_vm标志 */</span></span><br><span class="line">    <span class="keyword">if</span> (can_try_again) &#123;</span><br><span class="line">      <span class="comment">// reset safe_to_recreate_vm to 1 so that retrial would be possible</span></span><br><span class="line">      safe_to_recreate_vm = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Creation failed. We must reset vm_created</span></span><br><span class="line">    <span class="comment">// 创建失败，需要重新设置vm_create值</span></span><br><span class="line">    *vm = <span class="number">0</span>;</span><br><span class="line">    *(JNIEnv**)penv = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// reset vm_created last to avoid race condition. Use OrderAccess to</span></span><br><span class="line">    <span class="comment">// control both compiler and architectural-based reordering.</span></span><br><span class="line">    OrderAccess<span class="type">::release_store</span>(&amp;vm_created, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Threads-create-vm"><a href="#Threads-create-vm" class="headerlink" title="Threads::create_vm"></a>Threads::create_vm</h3><p>作用：hotspot创建java虚拟机函数<br>位置：jdk8u-dev/hotspot/src/share/vm/runtime/thread.cpp<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br></pre></td><td class="code"><pre><span class="line">jint Threads<span class="type">::create_vm</span>(JavaVMInitArgs* args, bool* canTryAgain) &#123;</span><br><span class="line">  <span class="comment">//调用JDK_Version_init();</span></span><br><span class="line">  <span class="comment">//加载libjava.so、libverify.so库，通过调用库中导出的JDK_GetVersionInfo0查询当前虚拟机版本</span></span><br><span class="line">  extern <span class="literal">void</span> JDK_Version_init();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查当前版本是否在支持范围内，主要不支持1.1版本 高于1.1都返回true</span></span><br><span class="line">  <span class="keyword">if</span> (!is_supported_jni_version(args-&gt;version)) <span class="keyword">return</span> JNI_EVERSION;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化系统输出流模块</span></span><br><span class="line">  ostream_init();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理java启动属性.</span></span><br><span class="line">  Arguments<span class="type">::process_sun_java_launcher_properties</span>(args);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize the os module before using TLS</span></span><br><span class="line">  <span class="comment">//初始化系统环境，例如：获取当前的进程pid、获取系统时钟、设置内存页大小</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  os<span class="type">::init</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize system properties.</span></span><br><span class="line">  Arguments<span class="type">::init_system_properties</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// So that JDK version can be used as a discrimintor when parsing arguments</span></span><br><span class="line">  JDK_Version_init();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Update/Initialize System properties after JDK version number is known</span></span><br><span class="line">  Arguments<span class="type">::init_version_specific_system_properties</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Parse arguments</span></span><br><span class="line">  jint parse_result = Arguments<span class="type">::parse</span>(args);</span><br><span class="line">  <span class="keyword">if</span> (parse_result != JNI_OK) <span class="keyword">return</span> parse_result;</span><br><span class="line"></span><br><span class="line">  os<span class="type">::init_before_ergo</span>();</span><br><span class="line"></span><br><span class="line">  jint ergo_result = Arguments<span class="type">::apply_ergo</span>();</span><br><span class="line">  <span class="keyword">if</span> (ergo_result != JNI_OK) <span class="keyword">return</span> ergo_result;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (PauseAtStartup) &#123;</span><br><span class="line">    os<span class="type">::pause</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">#ifndef USDT2</span><br><span class="line">  HS_DTRACE_PROBE(hotspot, vm__init__begin);</span><br><span class="line">#else <span class="comment">/* USDT2 */</span></span><br><span class="line">  HOTSPOT_VM_INIT_BEGIN();</span><br><span class="line">#endif <span class="comment">/* USDT2 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Record VM creation timing statistics</span></span><br><span class="line">  TraceVmCreationTime create_vm_timer;</span><br><span class="line">  create_vm_timer.start();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Timing (must come after argument parsing)</span></span><br><span class="line">  TraceTime timer(<span class="string">"Create VM"</span>, TraceStartupTime);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize the os module after parsing the args</span></span><br><span class="line">  jint os_init_2_result = os<span class="type">::init_2</span>();</span><br><span class="line">  <span class="keyword">if</span> (os_init_2_result != JNI_OK) <span class="keyword">return</span> os_init_2_result;</span><br><span class="line"></span><br><span class="line">  jint adjust_after_os_result = Arguments<span class="type">::adjust_after_os</span>();</span><br><span class="line">  <span class="keyword">if</span> (adjust_after_os_result != JNI_OK) <span class="keyword">return</span> adjust_after_os_result;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// intialize TLS</span></span><br><span class="line">  ThreadLocalStorage<span class="type">::init</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Bootstrap native memory tracking, so it can start recording memory</span></span><br><span class="line">  <span class="comment">// activities before worker thread is started. This is the first phase</span></span><br><span class="line">  <span class="comment">// of bootstrapping, VM is currently running in single-thread mode.</span></span><br><span class="line">  MemTracker<span class="type">::bootstrap_single_thread</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize output stream logging</span></span><br><span class="line">  ostream_init_log();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Convert -Xrun to -agentlib: if there is no JVM_OnLoad</span></span><br><span class="line">  <span class="comment">// Must be before create_vm_init_agents()</span></span><br><span class="line">  <span class="keyword">if</span> (Arguments<span class="type">::init_libraries_at_startup</span>()) &#123;</span><br><span class="line">    convert_vm_init_libraries_to_agents();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Launch -agentlib/-agentpath and converted -Xrun agents</span></span><br><span class="line">  <span class="keyword">if</span> (Arguments<span class="type">::init_agents_at_startup</span>()) &#123;</span><br><span class="line">    create_vm_init_agents();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize Threads state</span></span><br><span class="line">  _thread_list = <span class="built_in">NULL</span>;</span><br><span class="line">  _number_of_threads = <span class="number">0</span>;</span><br><span class="line">  _number_of_non_daemon_threads = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize global data structures and create system classes in heap</span></span><br><span class="line">  vm_init_globals();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Attach the main thread to this os thread</span></span><br><span class="line">  JavaThread* main_thread = <span class="literal">new</span> JavaThread();</span><br><span class="line">  main_thread-&gt;set_thread_state(_thread_in_vm);</span><br><span class="line">  <span class="comment">// must do this before set_active_handles and initialize_thread_local_storage</span></span><br><span class="line">  <span class="comment">// Note: on solaris initialize_thread_local_storage() will (indirectly)</span></span><br><span class="line">  <span class="comment">// change the stack size recorded here to one based on the java thread</span></span><br><span class="line">  <span class="comment">// stacksize. This adjusted size is what is used to figure the placement</span></span><br><span class="line">  <span class="comment">// of the guard pages.</span></span><br><span class="line">  main_thread-&gt;record_stack_base_and_size();</span><br><span class="line">  main_thread-&gt;initialize_thread_local_storage();</span><br><span class="line"></span><br><span class="line">  main_thread-&gt;set_active_handles(JNIHandleBlock<span class="type">::allocate_block</span>());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!main_thread-&gt;set_as_starting_thread()) &#123;</span><br><span class="line">    vm_shutdown_during_initialization(</span><br><span class="line">      <span class="string">"Failed necessary internal allocation. Out of swap space"</span>);</span><br><span class="line">    delete main_thread;</span><br><span class="line">    *canTryAgain = <span class="literal">false</span>; <span class="comment">// don't let caller call JNI_CreateJavaVM again</span></span><br><span class="line">    <span class="keyword">return</span> JNI_ENOMEM;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Enable guard page *after* os::create_main_thread(), otherwise it would</span></span><br><span class="line">  <span class="comment">// crash Linux VM, see notes in os_linux.cpp.</span></span><br><span class="line">  main_thread-&gt;create_stack_guard_pages();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize Java-Level synchronization subsystem</span></span><br><span class="line">  ObjectMonitor<span class="type">::Initialize</span>() ;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Second phase of bootstrapping, VM is about entering multi-thread mode</span></span><br><span class="line">  MemTracker<span class="type">::bootstrap_multi_thread</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize global modules</span></span><br><span class="line">  jint status = init_globals();</span><br><span class="line">  <span class="keyword">if</span> (status != JNI_OK) &#123;</span><br><span class="line">    delete main_thread;</span><br><span class="line">    *canTryAgain = <span class="literal">false</span>; <span class="comment">// don't let caller call JNI_CreateJavaVM again</span></span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Should be done after the heap is fully created</span></span><br><span class="line">  main_thread-&gt;cache_global_variables();</span><br><span class="line"></span><br><span class="line">  HandleMark hm;</span><br><span class="line"></span><br><span class="line">  &#123; MutexLocker mu(Threads_lock);</span><br><span class="line">    Threads<span class="type">::add</span>(main_thread);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Any JVMTI raw monitors entered in onload will transition into</span></span><br><span class="line">  <span class="comment">// real raw monitor. VM is setup enough here for raw monitor enter.</span></span><br><span class="line">  JvmtiExport<span class="type">::transition_pending_onload_raw_monitors</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fully start NMT</span></span><br><span class="line">  MemTracker<span class="type">::start</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create the VMThread</span></span><br><span class="line">  &#123; TraceTime timer(<span class="string">"Start VMThread"</span>, TraceStartupTime);</span><br><span class="line">    VMThread<span class="type">::create</span>();</span><br><span class="line">    <span class="keyword">Thread</span>* vmthread = VMThread<span class="type">::vm_thread</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!os<span class="type">::create_thread</span>(vmthread, os<span class="type">::vm_thread</span>))</span><br><span class="line">      vm_exit_during_initialization(<span class="string">"Cannot create VM thread. Out of system resources."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait for the VM thread to become ready, and VMThread::run to initialize</span></span><br><span class="line">    <span class="comment">// Monitors can have spurious returns, must always check another state flag</span></span><br><span class="line">    &#123;</span><br><span class="line">      MutexLocker ml(Notify_lock);</span><br><span class="line">      os<span class="type">::start_thread</span>(vmthread);</span><br><span class="line">      <span class="keyword">while</span> (vmthread-&gt;active_handles() == <span class="built_in">NULL</span>) &#123;</span><br><span class="line">        Notify_lock-&gt;wait();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  assert (Universe<span class="type">::is_fully_initialized</span>(), <span class="string">"not initialized"</span>);</span><br><span class="line">  <span class="keyword">if</span> (VerifyDuringStartup) &#123;</span><br><span class="line">    <span class="comment">// Make sure we're starting with a clean slate.</span></span><br><span class="line">    VM_Verify verify_op;</span><br><span class="line">    VMThread<span class="type">::execute</span>(&amp;verify_op);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  EXCEPTION_MARK;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// At this point, the Universe is initialized, but we have not executed</span></span><br><span class="line">  <span class="comment">// any byte code.  Now is a good time (the only time) to dump out the</span></span><br><span class="line">  <span class="comment">// internal state of the JVM for sharing.</span></span><br><span class="line">  <span class="keyword">if</span> (DumpSharedSpaces) &#123;</span><br><span class="line">    MetaspaceShared<span class="type">::preload_and_dump</span>(CHECK_0);</span><br><span class="line">    ShouldNotReachHere();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Always call even when there are not JVMTI environments yet, since environments</span></span><br><span class="line">  <span class="comment">// may be attached late and JVMTI must track phases of VM execution</span></span><br><span class="line">  JvmtiExport<span class="type">::enter_start_phase</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Notify JVMTI agents that VM has started (JNI is up) - nop if no agents.</span></span><br><span class="line">  JvmtiExport<span class="type">::post_vm_start</span>();</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    TraceTime timer(<span class="string">"Initialize java.lang classes"</span>, TraceStartupTime);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (EagerXrunInit &amp;&amp; Arguments<span class="type">::init_libraries_at_startup</span>()) &#123;</span><br><span class="line">      create_vm_init_libraries();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    initialize_class(vmSymbols<span class="type">::java_lang_String</span>(), CHECK_0);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize java_lang.System (needed before creating the thread)</span></span><br><span class="line">    initialize_class(vmSymbols<span class="type">::java_lang_System</span>(), CHECK_0);</span><br><span class="line">    initialize_class(vmSymbols<span class="type">::java_lang_ThreadGroup</span>(), CHECK_0);</span><br><span class="line">    <span class="keyword">Handle</span> thread_group = create_initial_thread_group(CHECK_0);</span><br><span class="line">    Universe<span class="type">::set_main_thread_group</span>(thread_group());</span><br><span class="line">    initialize_class(vmSymbols<span class="type">::java_lang_Thread</span>(), CHECK_0);</span><br><span class="line">    oop thread_object = create_initial_thread(thread_group, main_thread, CHECK_0);</span><br><span class="line">    main_thread-&gt;set_threadObj(thread_object);</span><br><span class="line">    <span class="comment">// Set thread status to running since main thread has</span></span><br><span class="line">    <span class="comment">// been started and running.</span></span><br><span class="line">    java_lang_Thread<span class="type">::set_thread_status</span>(thread_object,</span><br><span class="line">                                        java_lang_Thread<span class="type">::RUNNABLE</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The VM creates &amp; returns objects of this class. Make sure it's initialized.</span></span><br><span class="line">    initialize_class(vmSymbols<span class="type">::java_lang_Class</span>(), CHECK_0);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The VM preresolves methods to these classes. Make sure that they get initialized</span></span><br><span class="line">    initialize_class(vmSymbols<span class="type">::java_lang_reflect_Method</span>(), CHECK_0);</span><br><span class="line">    initialize_class(vmSymbols<span class="type">::java_lang_ref_Finalizer</span>(),  CHECK_0);</span><br><span class="line">    call_initializeSystemClass(CHECK_0);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get the Java runtime name after java.lang.System is initialized</span></span><br><span class="line">    JDK_Version<span class="type">::set_runtime_name</span>(get_java_runtime_name(<span class="keyword">THREAD</span>));</span><br><span class="line">    JDK_Version<span class="type">::set_runtime_version</span>(get_java_runtime_version(<span class="keyword">THREAD</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// an instance of OutOfMemory exception has been allocated earlier</span></span><br><span class="line">    initialize_class(vmSymbols<span class="type">::java_lang_OutOfMemoryError</span>(), CHECK_0);</span><br><span class="line">    initialize_class(vmSymbols<span class="type">::java_lang_NullPointerException</span>(), CHECK_0);</span><br><span class="line">    initialize_class(vmSymbols<span class="type">::java_lang_ClassCastException</span>(), CHECK_0);</span><br><span class="line">    initialize_class(vmSymbols<span class="type">::java_lang_ArrayStoreException</span>(), CHECK_0);</span><br><span class="line">    initialize_class(vmSymbols<span class="type">::java_lang_ArithmeticException</span>(), CHECK_0);</span><br><span class="line">    initialize_class(vmSymbols<span class="type">::java_lang_StackOverflowError</span>(), CHECK_0);</span><br><span class="line">    initialize_class(vmSymbols<span class="type">::java_lang_IllegalMonitorStateException</span>(), CHECK_0);</span><br><span class="line">    initialize_class(vmSymbols<span class="type">::java_lang_IllegalArgumentException</span>(), CHECK_0);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// See        : bugid 4211085.</span></span><br><span class="line">  <span class="comment">// Background : the static initializer of java.lang.Compiler tries to read</span></span><br><span class="line">  <span class="comment">//              property"java.compiler" and read &amp; write property "java.vm.info".</span></span><br><span class="line">  <span class="comment">//              When a security manager is installed through the command line</span></span><br><span class="line">  <span class="comment">//              option "-Djava.security.manager", the above properties are not</span></span><br><span class="line">  <span class="comment">//              readable and the static initializer for java.lang.Compiler fails</span></span><br><span class="line">  <span class="comment">//              resulting in a NoClassDefFoundError.  This can happen in any</span></span><br><span class="line">  <span class="comment">//              user code which calls methods in java.lang.Compiler.</span></span><br><span class="line">  <span class="comment">// Hack :       the hack is to pre-load and initialize this class, so that only</span></span><br><span class="line">  <span class="comment">//              system domains are on the stack when the properties are read.</span></span><br><span class="line">  <span class="comment">//              Currently even the AWT code has calls to methods in java.lang.Compiler.</span></span><br><span class="line">  <span class="comment">//              On the classic VM, java.lang.Compiler is loaded very early to load the JIT.</span></span><br><span class="line">  <span class="comment">// Future Fix : the best fix is to grant everyone permissions to read "java.compiler" and</span></span><br><span class="line">  <span class="comment">//              read and write"java.vm.info" in the default policy file. See bugid 4211383</span></span><br><span class="line">  <span class="comment">//              Once that is done, we should remove this hack.</span></span><br><span class="line">  initialize_class(vmSymbols<span class="type">::java_lang_Compiler</span>(), CHECK_0);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// More hackery - the static initializer of java.lang.Compiler adds the string "nojit" to</span></span><br><span class="line">  <span class="comment">// the java.vm.info property if no jit gets loaded through java.lang.Compiler (the hotspot</span></span><br><span class="line">  <span class="comment">// compiler does not get loaded through java.lang.Compiler).  "java -version" with the</span></span><br><span class="line">  <span class="comment">// hotspot vm says "nojit" all the time which is confusing.  So, we reset it here.</span></span><br><span class="line">  <span class="comment">// This should also be taken out as soon as 4211383 gets fixed.</span></span><br><span class="line">  reset_vm_info_property(CHECK_0);</span><br><span class="line"></span><br><span class="line">  quicken_jni_functions();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Must be run after init_ft which initializes ft_enabled</span></span><br><span class="line">  <span class="keyword">if</span> (TRACE_INITIALIZE() != JNI_OK) &#123;</span><br><span class="line">    vm_exit_during_initialization(<span class="string">"Failed to initialize tracing backend"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set flag that basic initialization has completed. Used by exceptions and various</span></span><br><span class="line">  <span class="comment">// debug stuff, that does not work until all basic classes have been initialized.</span></span><br><span class="line">  set_init_completed();</span><br><span class="line"></span><br><span class="line">#ifndef USDT2</span><br><span class="line">  HS_DTRACE_PROBE(hotspot, vm__init__end);</span><br><span class="line">#else <span class="comment">/* USDT2 */</span></span><br><span class="line">  HOTSPOT_VM_INIT_END();</span><br><span class="line">#endif <span class="comment">/* USDT2 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// record VM initialization completion time</span></span><br><span class="line">#if INCLUDE_MANAGEMENT</span><br><span class="line">  Management<span class="type">::record_vm_init_completed</span>();</span><br><span class="line">#endif <span class="comment">// INCLUDE_MANAGEMENT</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Compute system loader. Note that this has to occur after set_init_completed, since</span></span><br><span class="line">  <span class="comment">// valid exceptions may be thrown in the process.</span></span><br><span class="line">  <span class="comment">// Note that we do not use CHECK_0 here since we are inside an EXCEPTION_MARK and</span></span><br><span class="line">  <span class="comment">// set_init_completed has just been called, causing exceptions not to be shortcut</span></span><br><span class="line">  <span class="comment">// anymore. We call vm_exit_during_initialization directly instead.</span></span><br><span class="line">  SystemDictionary<span class="type">::compute_java_system_loader</span>(<span class="keyword">THREAD</span>);</span><br><span class="line">  <span class="keyword">if</span> (HAS_PENDING_EXCEPTION) &#123;</span><br><span class="line">    vm_exit_during_initialization(<span class="keyword">Handle</span>(<span class="keyword">THREAD</span>, PENDING_EXCEPTION));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">#if INCLUDE_ALL_GCS</span><br><span class="line">  <span class="comment">// Support for ConcurrentMarkSweep. This should be cleaned up</span></span><br><span class="line">  <span class="comment">// and better encapsulated. The ugly nested if test would go away</span></span><br><span class="line">  <span class="comment">// once things are properly refactored. XXX YSR</span></span><br><span class="line">  <span class="keyword">if</span> (UseConcMarkSweepGC || UseG1GC) &#123;</span><br><span class="line">    <span class="keyword">if</span> (UseConcMarkSweepGC) &#123;</span><br><span class="line">      ConcurrentMarkSweepThread<span class="type">::makeSurrogateLockerThread</span>(<span class="keyword">THREAD</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ConcurrentMarkThread<span class="type">::makeSurrogateLockerThread</span>(<span class="keyword">THREAD</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (HAS_PENDING_EXCEPTION) &#123;</span><br><span class="line">      vm_exit_during_initialization(<span class="keyword">Handle</span>(<span class="keyword">THREAD</span>, PENDING_EXCEPTION));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">#endif <span class="comment">// INCLUDE_ALL_GCS</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Always call even when there are not JVMTI environments yet, since environments</span></span><br><span class="line">  <span class="comment">// may be attached late and JVMTI must track phases of VM execution</span></span><br><span class="line">  JvmtiExport<span class="type">::enter_live_phase</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Signal Dispatcher needs to be started before VMInit event is posted</span></span><br><span class="line">  os<span class="type">::signal_init</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Start Attach Listener if +StartAttachListener or it can't be started lazily</span></span><br><span class="line">  <span class="keyword">if</span> (!DisableAttachMechanism) &#123;</span><br><span class="line">    AttachListener<span class="type">::vm_start</span>();</span><br><span class="line">    <span class="keyword">if</span> (StartAttachListener || AttachListener<span class="type">::init_at_startup</span>()) &#123;</span><br><span class="line">      AttachListener<span class="type">::init</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Launch -Xrun agents</span></span><br><span class="line">  <span class="comment">// Must be done in the JVMTI live phase so that for backward compatibility the JDWP</span></span><br><span class="line">  <span class="comment">// back-end can launch with -Xdebug -Xrunjdwp.</span></span><br><span class="line">  <span class="keyword">if</span> (!EagerXrunInit &amp;&amp; Arguments<span class="type">::init_libraries_at_startup</span>()) &#123;</span><br><span class="line">    create_vm_init_libraries();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Notify JVMTI agents that VM initialization is complete - nop if no agents.</span></span><br><span class="line">  JvmtiExport<span class="type">::post_vm_initialized</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (TRACE_START() != JNI_OK) &#123;</span><br><span class="line">    vm_exit_during_initialization(<span class="string">"Failed to start tracing backend."</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (CleanChunkPoolAsync) &#123;</span><br><span class="line">    Chunk<span class="type">::start_chunk_pool_cleaner_task</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// initialize compiler(s)</span></span><br><span class="line">#if defined(COMPILER1) || defined(COMPILER2) || defined(SHARK)</span><br><span class="line">  CompileBroker<span class="type">::compilation_init</span>();</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (EnableInvokeDynamic) &#123;</span><br><span class="line">    <span class="comment">// Pre-initialize some JSR292 core classes to avoid deadlock during class loading.</span></span><br><span class="line">    <span class="comment">// It is done after compilers are initialized, because otherwise compilations of</span></span><br><span class="line">    <span class="comment">// signature polymorphic MH intrinsics can be missed</span></span><br><span class="line">    <span class="comment">// (see SystemDictionary::find_method_handle_intrinsic).</span></span><br><span class="line">    initialize_class(vmSymbols<span class="type">::java_lang_invoke_MethodHandle</span>(), CHECK_0);</span><br><span class="line">    initialize_class(vmSymbols<span class="type">::java_lang_invoke_MemberName</span>(), CHECK_0);</span><br><span class="line">    initialize_class(vmSymbols<span class="type">::java_lang_invoke_MethodHandleNatives</span>(), CHECK_0);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">#if INCLUDE_MANAGEMENT</span><br><span class="line">  Management<span class="type">::initialize</span>(<span class="keyword">THREAD</span>);</span><br><span class="line">#endif <span class="comment">// INCLUDE_MANAGEMENT</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (HAS_PENDING_EXCEPTION) &#123;</span><br><span class="line">    <span class="comment">// management agent fails to start possibly due to</span></span><br><span class="line">    <span class="comment">// configuration problem and is responsible for printing</span></span><br><span class="line">    <span class="comment">// stack trace if appropriate. Simply exit VM.</span></span><br><span class="line">    vm_exit(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (Arguments<span class="type">::has_profile</span>())       FlatProfiler<span class="type">::engage</span>(main_thread, <span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">if</span> (MemProfiling)                   MemProfiler<span class="type">::engage</span>();</span><br><span class="line">  StatSampler<span class="type">::engage</span>();</span><br><span class="line">  <span class="keyword">if</span> (CheckJNICalls)                  JniPeriodicChecker<span class="type">::engage</span>();</span><br><span class="line"></span><br><span class="line">  BiasedLocking<span class="type">::init</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (JDK_Version<span class="type">::current</span>().post_vm_init_hook_enabled()) &#123;</span><br><span class="line">    call_postVMInitHook(<span class="keyword">THREAD</span>);</span><br><span class="line">    <span class="comment">// The Java side of PostVMInitHook.run must deal with all</span></span><br><span class="line">    <span class="comment">// exceptions and provide means of diagnosis.</span></span><br><span class="line">    <span class="keyword">if</span> (HAS_PENDING_EXCEPTION) &#123;</span><br><span class="line">      CLEAR_PENDING_EXCEPTION;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">      MutexLockerEx ml(PeriodicTask_lock, Mutex<span class="type">::_no_safepoint_check_flag</span>);</span><br><span class="line">      <span class="comment">// Make sure the watcher thread can be started by WatcherThread::start()</span></span><br><span class="line">      <span class="comment">// or by dynamic enrollment.</span></span><br><span class="line">      WatcherThread<span class="type">::make_startable</span>();</span><br><span class="line">      <span class="comment">// Start up the WatcherThread if there are any periodic tasks</span></span><br><span class="line">      <span class="comment">// <span class="doctag">NOTE:</span>  All PeriodicTasks should be registered by now. If they</span></span><br><span class="line">      <span class="comment">//   aren't, late joiners might appear to start slowly (we might</span></span><br><span class="line">      <span class="comment">//   take a while to process their first tick).</span></span><br><span class="line">      <span class="keyword">if</span> (PeriodicTask<span class="type">::num_tasks</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          WatcherThread<span class="type">::start</span>();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Give os specific code one last chance to start</span></span><br><span class="line">  os<span class="type">::init_3</span>();</span><br><span class="line"></span><br><span class="line">  create_vm_timer.end();</span><br><span class="line">#ifdef ASSERT</span><br><span class="line">  _vm_complete = <span class="literal">true</span>;</span><br><span class="line">#endif</span><br><span class="line">  <span class="keyword">return</span> JNI_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录openjdk1.8 启动过程流程梳理。&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="http://lehoon.cn/categories/orther/"/>
    
    
      <category term="openjdk 开源jdk" scheme="http://lehoon.cn/tags/openjdk-%E5%BC%80%E6%BA%90jdk/"/>
    
      <category term="学习记录" scheme="http://lehoon.cn/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="java启动流程" scheme="http://lehoon.cn/tags/java%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>OpenJdk1.8笔记</title>
    <link href="http://lehoon.cn/orther/2018/11/26/openjdk-study-note.html"/>
    <id>http://lehoon.cn/orther/2018/11/26/openjdk-study-note.html</id>
    <published>2018-11-26T09:03:49.000Z</published>
    <updated>2018-11-27T09:08:06.397Z</updated>
    
    <content type="html"><![CDATA[<p>本文基于openjdk1.8整理的参数笔记。<br><a id="more"></a></p><h2 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h2><h3 id="JAVA-LAUNCHER-DEBUG"><a href="#JAVA-LAUNCHER-DEBUG" class="headerlink" title="_JAVA_LAUNCHER_DEBUG"></a>_JAVA_LAUNCHER_DEBUG</h3><p>该参数是java执行过程中从环境变量中获取是否定义，如果定义则会打印调试信息，包括执行状态、启动参数、Jvm参数等信息，用户调试使用，使用方法如：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">[root@lehoon bin]# export _JAVA_LAUNCHER_DEBUG=1</span><br><span class="line">[root@lehoon bin]# cd $JAVA_HOME/bin</span><br><span class="line">[root@lehoon bin]# java</span><br><span class="line">-<span class="ruby">---_JAVA_LAUNCHER_DEBUG----</span></span><br><span class="line"><span class="ruby">Launcher <span class="symbol">state:</span>   /<span class="regexp">/启动状态信息</span></span></span><br><span class="line"><span class="ruby">        <span class="symbol">debug:</span>on</span></span><br><span class="line"><span class="ruby">        <span class="symbol">javargs:</span>off</span></span><br><span class="line"><span class="ruby">        program <span class="symbol">name:</span>java</span></span><br><span class="line"><span class="ruby">        launcher <span class="symbol">name:</span>java</span></span><br><span class="line"><span class="ruby">        <span class="symbol">javaw:</span>off</span></span><br><span class="line"><span class="ruby">        <span class="symbol">fullversion:</span><span class="number">1.8</span>.<span class="number">0_1</span>81-b13</span></span><br><span class="line"><span class="ruby">        <span class="symbol">dotversion:</span><span class="number">1.8</span></span></span><br><span class="line"><span class="ruby">        <span class="symbol">ergo_policy:</span>DEFAULT_ERGONOMICS_POLICY</span></span><br><span class="line"><span class="ruby">Command line <span class="symbol">args:</span>  /<span class="regexp">/命令行参数</span></span></span><br><span class="line"><span class="ruby">argv[<span class="number">0</span>] = ./java</span></span><br><span class="line"><span class="ruby">JRE path is /usr/local/jdk1.<span class="number">8.0_181</span>/jre</span></span><br><span class="line"><span class="ruby">jvm.cfg[<span class="number">0</span>] = -&gt;-server&lt;-</span></span><br><span class="line"><span class="ruby">jvm.cfg[<span class="number">1</span>] = -&gt;-client&lt;-</span></span><br><span class="line"><span class="ruby"><span class="number">1</span> micro seconds to parse jvm.cfg</span></span><br><span class="line"><span class="ruby">Default <span class="symbol">VM:</span> server</span></span><br><span class="line"><span class="ruby">Does <span class="string">`/usr/local/jdk1.8.0_181/jre/lib/amd64/server/libjvm.so' exist ... yes.</span></span></span><br><span class="line"><span class="ruby"><span class="symbol">mustsetenv:</span> FALSE</span></span><br><span class="line"><span class="ruby">JVM path is /usr/local/jdk1.<span class="number">8.0_181</span>/jre/lib/amd64/server/libjvm.so</span></span><br><span class="line"><span class="ruby"><span class="number">1</span> micro seconds to LoadJavaVM</span></span><br><span class="line"><span class="ruby">JavaVM <span class="symbol">args:</span>   /<span class="regexp">/jvm参数</span></span></span><br><span class="line"><span class="ruby">    version <span class="number">0x00010002</span>, ignoreUnrecognized is JNI_FALSE, nOptions is <span class="number">4</span></span></span><br><span class="line"><span class="ruby">    option[ <span class="number">0</span>] = <span class="string">'-Dsun.java.launcher.diag=true'</span></span></span><br><span class="line"><span class="ruby">    option[ <span class="number">1</span>] = <span class="string">'-Djava.class.path=.'</span></span></span><br><span class="line"><span class="ruby">    option[ <span class="number">2</span>] = <span class="string">'-Dsun.java.launcher=SUN_STANDARD'</span></span></span><br><span class="line"><span class="ruby">    option[ <span class="number">3</span>] = <span class="string">'-Dsun.java.launcher.pid=8889'</span></span></span><br><span class="line"><span class="ruby"><span class="symbol">pages:</span> <span class="number">724375</span>  <span class="symbol">page_size:</span> <span class="number">4096</span>  physical <span class="symbol">memory:</span> <span class="number">2967040000</span> (<span class="number">2.763</span>GB)</span></span><br><span class="line"><span class="ruby">sysconf(_SC_NPROCESSORS_CONF): <span class="number">4</span></span></span><br><span class="line"><span class="ruby"><span class="symbol">vendor:</span> G e n u i n e I n t e l </span></span><br><span class="line"><span class="ruby"><span class="symbol">value_of_eax:</span> <span class="number">0x406f1</span>  <span class="symbol">value_of_edx:</span> <span class="number">0x1fabfbff</span></span></span><br><span class="line"><span class="ruby"><span class="keyword">not</span> Pentium <span class="number">4</span> <span class="keyword">or</span> extended</span></span><br><span class="line"><span class="ruby">physical <span class="symbol">processors:</span> <span class="number">4</span></span></span><br><span class="line"><span class="ruby"><span class="symbol">linux_amd64_ServerClassMachine:</span> <span class="literal">true</span></span></span><br><span class="line"><span class="ruby"><span class="symbol">ServerClassMachine:</span> returns default value of <span class="literal">true</span></span></span><br><span class="line"><span class="ruby">用法: java [-options] <span class="class"><span class="keyword">class</span> [<span class="title">args</span>...]</span></span></span><br><span class="line"><span class="ruby">           (执行类)</span></span><br><span class="line"><span class="ruby">   或  java [-options] -jar jarfile [args...]</span></span><br><span class="line"><span class="ruby">           (执行 jar 文件)</span></span><br><span class="line"><span class="ruby">其中选项包括<span class="symbol">:</span></span></span><br><span class="line"><span class="ruby">    -d32          使用 <span class="number">32</span> 位数据模型 (如果可用)</span></span><br><span class="line"><span class="ruby">    -d64          使用 <span class="number">64</span> 位数据模型 (如果可用)</span></span><br><span class="line"><span class="ruby">    -server       选择 <span class="string">"server"</span> VM</span></span><br><span class="line"><span class="ruby">                  默认 VM 是 server,</span></span><br><span class="line"><span class="ruby">                  因为您是在服务器类计算机上运行。</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">    -cp &lt;目录和 zip/jar 文件的类搜索路径&gt;</span></span><br><span class="line"><span class="ruby">    -classpath &lt;目录和 zip/jar 文件的类搜索路径&gt;</span></span><br><span class="line"><span class="ruby">                  用 : 分隔的目录, JAR 档案</span></span><br><span class="line"><span class="ruby">                  和 ZIP 档案列表, 用于搜索类文件。</span></span><br><span class="line"><span class="ruby">    -D&lt;名称&gt;=&lt;值&gt;</span></span><br><span class="line"><span class="ruby">                  设置系统属性</span></span><br><span class="line"><span class="ruby">    -<span class="symbol">verbose:</span>[<span class="class"><span class="keyword">class</span>|<span class="title">gc</span>|<span class="title">jni</span>]</span></span></span><br><span class="line"><span class="ruby">                  启用详细输出</span></span><br><span class="line"><span class="ruby">    -version      输出产品版本并退出</span></span><br><span class="line"><span class="ruby">    -<span class="symbol">version:</span>&lt;值&gt;</span></span><br><span class="line"><span class="ruby">                  警告: 此功能已过时, 将在</span></span><br><span class="line"><span class="ruby">                  未来发行版中删除。</span></span><br><span class="line"><span class="ruby">                  需要指定的版本才能运行</span></span><br><span class="line"><span class="ruby">    -showversion  输出产品版本并继续</span></span><br><span class="line"><span class="ruby">    -jre-restrict-search <span class="params">| -no-jre-restrict-search</span></span></span><br><span class="line"><span class="ruby">                  警告: 此功能已过时, 将在</span></span><br><span class="line"><span class="ruby">                  未来发行版中删除。</span></span><br><span class="line"><span class="ruby">                  在版本搜索中包括/排除用户专用 JRE</span></span><br><span class="line"><span class="ruby">    -? -help      输出此帮助消息</span></span><br><span class="line"><span class="ruby">    -X            输出非标准选项的帮助</span></span><br><span class="line"><span class="ruby">    -ea[<span class="symbol">:&lt;packagename&gt;</span>...<span class="params">|:&lt;classname&gt;]</span></span></span><br><span class="line"><span class="ruby">    -enableassertions[<span class="symbol">:&lt;packagename&gt;</span>...<span class="params">|:&lt;classname&gt;]</span></span></span><br><span class="line"><span class="ruby">                  按指定的粒度启用断言</span></span><br><span class="line"><span class="ruby">    -da[<span class="symbol">:&lt;packagename&gt;</span>...<span class="params">|:&lt;classname&gt;]</span></span></span><br><span class="line"><span class="ruby">    -disableassertions[<span class="symbol">:&lt;packagename&gt;</span>...<span class="params">|:&lt;classname&gt;]</span></span></span><br><span class="line"><span class="ruby">                  禁用具有指定粒度的断言</span></span><br><span class="line"><span class="ruby">    -esa <span class="params">| -enablesystemassertions</span></span></span><br><span class="line"><span class="ruby">                  启用系统断言</span></span><br><span class="line"><span class="ruby">    -dsa <span class="params">| -disablesystemassertions</span></span></span><br><span class="line"><span class="ruby">                  禁用系统断言</span></span><br><span class="line"><span class="ruby">    -<span class="symbol">agentlib:</span>&lt;libname&gt;[=&lt;选项&gt;]</span></span><br><span class="line"><span class="ruby">                  加载本机代理库 &lt;libname&gt;, 例如 -<span class="symbol">agentlib:</span>hprof</span></span><br><span class="line"><span class="ruby">                  另请参阅 -<span class="symbol">agentlib:</span>jdwp=help 和 -<span class="symbol">agentlib:</span>hprof=help</span></span><br><span class="line"><span class="ruby">    -<span class="symbol">agentpath:</span>&lt;pathname&gt;[=&lt;选项&gt;]</span></span><br><span class="line"><span class="ruby">                  按完整路径名加载本机代理库</span></span><br><span class="line"><span class="ruby">    -<span class="symbol">javaagent:</span>&lt;jarpath&gt;[=&lt;选项&gt;]</span></span><br><span class="line"><span class="ruby">                  加载 Java 编程语言代理, 请参阅 java.lang.instrument</span></span><br><span class="line"><span class="ruby">    -<span class="symbol">splash:</span>&lt;imagepath&gt;</span></span><br><span class="line"><span class="ruby">                  使用指定的图像显示启动屏幕</span></span><br><span class="line"><span class="ruby">有关详细信息, 请参阅 <span class="symbol">http:</span>/<span class="regexp">/www.oracle.com/technetwork</span><span class="regexp">/java/javase</span><span class="regexp">/documentation/index</span>.html。</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文基于openjdk1.8整理的参数笔记。&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="http://lehoon.cn/categories/orther/"/>
    
    
      <category term="openjdk 开源jdk" scheme="http://lehoon.cn/tags/openjdk-%E5%BC%80%E6%BA%90jdk/"/>
    
      <category term="学习记录" scheme="http://lehoon.cn/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="java参数" scheme="http://lehoon.cn/tags/java%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>win10系统使用及问题解决记录</title>
    <link href="http://lehoon.cn/orther/2018/11/19/win10-system-note.html"/>
    <id>http://lehoon.cn/orther/2018/11/19/win10-system-note.html</id>
    <published>2018-11-19T01:52:56.000Z</published>
    <updated>2018-11-26T01:33:48.652Z</updated>
    
    <content type="html"><![CDATA[<p>记录平时使用win10的一些问题解决方法和使用习惯。<br><a id="more"></a></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="系统启动项位置"><a href="#系统启动项位置" class="headerlink" title="系统启动项位置"></a>系统启动项位置</h3><p>有2中方式实现跟随系统启动方法，使用注册表和系统启动项快捷方式实现。</p><ul><li>注注册表项<ul><li>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</li><li>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</li></ul></li><li>启动文件夹<ul><li>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</li></ul></li></ul><h3 id="defender历史记录文件夹"><a href="#defender历史记录文件夹" class="headerlink" title="defender历史记录文件夹"></a>defender历史记录文件夹</h3><p>打开文件夹：C:\ProgramData\Microsoft\Windows Defender\Scans\History\Service\DetectionHistory<br>清空该文件夹下的文件。</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录平时使用win10的一些问题解决方法和使用习惯。&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="http://lehoon.cn/categories/orther/"/>
    
    
      <category term="win10系统" scheme="http://lehoon.cn/tags/win10%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="问题解决记录" scheme="http://lehoon.cn/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E8%AE%B0%E5%BD%95/"/>
    
      <category term="使用方法" scheme="http://lehoon.cn/tags/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux编译OpenJdk1.8</title>
    <link href="http://lehoon.cn/backend/2018/11/09/openjdk-compile-linux.html"/>
    <id>http://lehoon.cn/backend/2018/11/09/openjdk-compile-linux.html</id>
    <published>2018-11-09T07:24:16.000Z</published>
    <updated>2018-11-15T01:51:10.951Z</updated>
    
    <content type="html"><![CDATA[<p>记录在linux编译openjdk过程。<br><a id="more"></a></p><h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><p>在<a href="http://hg.openjdk.java.net/jdk8u/jdk8u-dev/" target="_blank" rel="noopener">下载网址</a>下载gz压缩包到本地。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="regexp">/opt/</span>source</span><br><span class="line">wget http:<span class="regexp">//</span>hg.openjdk.java.net<span class="regexp">/jdk8u/</span>jdk8u-dev<span class="regexp">/archive/</span>jdk8u-dev.tar.gz</span><br><span class="line">tar zxvf jdk8u-dev.tar.gz</span><br><span class="line">cd jdk8u-dev</span><br></pre></td></tr></table></figure></p><p>或者使用hg克隆到本地，然后下载源码<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> /<span class="keyword">opt</span>/<span class="keyword">source</span></span><br><span class="line">hg clone http://hg.openjdk.java.net/jdk8u/jdk8u-dev/</span><br><span class="line"><span class="keyword">cd</span> /<span class="keyword">opt</span>/<span class="keyword">source</span>/jdk8u-dev</span><br><span class="line">#下载源码</span><br><span class="line"><span class="keyword">sh</span> get_source.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure></p><h2 id="安装工具库"><a href="#安装工具库" class="headerlink" title="安装工具库"></a>安装工具库</h2><h3 id="安装jdk1-7"><a href="#安装jdk1-7" class="headerlink" title="安装jdk1.7"></a>安装jdk1.7</h3><p>编译openjdk1.8时需要一个以安装的jdk环境，因为在编译过程中会使用ant打包java的库文件，所以需要安装jdk，但是在编译1.8时最好使用1.7及以前版本的jdk。</p><p>手册上一句话说明：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Building JDK 8 requires <span class="keyword">use</span> <span class="keyword">of</span> a <span class="keyword">version</span> <span class="keyword">of</span> JDK <span class="number">7</span> that <span class="keyword">is</span> <span class="keyword">at</span> <span class="keyword">Update</span> <span class="number">7</span> <span class="keyword">or</span> newer. </span><br><span class="line">JDK <span class="number">8</span> developers should <span class="keyword">not</span> <span class="keyword">use</span> JDK <span class="number">8</span> <span class="keyword">as</span> the boot JDK, </span><br><span class="line"><span class="keyword">to</span> ensure that JDK <span class="number">8</span> dependencies <span class="keyword">are</span> <span class="keyword">not</span> introduced <span class="keyword">into</span> the parts </span><br><span class="line"><span class="keyword">of</span> the <span class="keyword">system</span> that <span class="keyword">are</span> built <span class="keyword">with</span> JDK <span class="number">7.</span></span><br></pre></td></tr></table></figure></p><p>下载jdk1.7（官网或者openjdk都可以）<br>mkdir -p /opt/depends/jdk1.7.0_80</p><h3 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install libXtst-devel libXt-devel libXrender-devel cups-devel freetype-devel alsa-<span class="class"><span class="keyword">lib</span>-<span class="title">devel</span></span></span><br></pre></td></tr></table></figure><p>安装完成后可以进行下一步。</p><h2 id="编译openJdk"><a href="#编译openJdk" class="headerlink" title="编译openJdk"></a>编译openJdk</h2><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">LANG</span>=C</span><br><span class="line">unset JAVA_HOME</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/opt/depends/jdk1.7.0_80</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>首先使用configure生成Makefile<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/source/jdk8u-dev</span><br><span class="line">./configure <span class="attribute">--with-boot-jdk</span>=/opt/depends/jdk1.7.0_80 <span class="attribute">--with-debug-level</span>=fastdebug <span class="attribute">--with-target-bits</span>=64 <span class="attribute">--with-num-cores</span>=4</span><br></pre></td></tr></table></figure></p><p>然后使用make编译<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#编译全部模块</span></span><br><span class="line"><span class="built_in">make</span> all </span><br><span class="line"></span><br><span class="line"><span class="meta">#编译最终的jdk和jre及打包相关的jar库</span></span><br><span class="line"><span class="built_in">make</span> images</span><br></pre></td></tr></table></figure></p><p>然后使用make all编译openjdk，最后在build文件下会有一个目录linux-x86_64-normal-server-fastdebug，是存放编译结果的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录在linux编译openjdk过程。&lt;br&gt;
    
    </summary>
    
      <category term="后端" scheme="http://lehoon.cn/categories/backend/"/>
    
    
      <category term="linux" scheme="http://lehoon.cn/tags/linux/"/>
    
      <category term="openjdk" scheme="http://lehoon.cn/tags/openjdk/"/>
    
      <category term="编译" scheme="http://lehoon.cn/tags/%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>apama发布笔记</title>
    <link href="http://lehoon.cn/backend/2018/10/16/apama-deploy-note.html"/>
    <id>http://lehoon.cn/backend/2018/10/16/apama-deploy-note.html</id>
    <published>2018-10-16T06:48:30.000Z</published>
    <updated>2018-10-18T01:38:22.334Z</updated>
    
    <content type="html"><![CDATA[<p>apama开发时可以使用apama的Software AG Designer工具开发和测试。但是在项目上线的时候，需要发布到服务器环境中，本文记录apama发布过程。<br><a id="more"></a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>apama发布支持以下几种方式。<br>1、使用Command Central部署组件<br>2、使用Ant脚本部署</p><h3 id="Command-Central部署"><a href="#Command-Central部署" class="headerlink" title="Command Central部署"></a>Command Central部署</h3><p>Software AG Command Central可用于跨多个主机配置，部署和监控各种Apama组件。</p><h3 id="Ant脚本部署"><a href="#Ant脚本部署" class="headerlink" title="Ant脚本部署"></a>Ant脚本部署</h3><p>Software AG Designer工具支持导出ant工程，支持手动命令启动、停止apama工程。利用apama-macros.xml文件中提供的Ant宏定义。可以在Apama安装的etc目录中找到此文件。<br>本文主要介绍ant脚本部署方式。</p><h2 id="部署工程"><a href="#部署工程" class="headerlink" title="部署工程"></a>部署工程</h2><h3 id="导出工程"><a href="#导出工程" class="headerlink" title="导出工程"></a>导出工程</h3><p>1、打开Software AG Designer工具，在Project Explorer试图中，项目上右键，选择Export菜单，显示导出对话框。<br>2、在导出对话框中，展开”Software AG”项目。<br>3、选择Apama Ant Project，然后点击Next，出现Ant导出对话框。<br>4、在Ant Export对话框中，指定如下配置项：</p><ul><li>a、启动项目，选择指定的apama工程；</li><li>b、导出文件夹，选择要导出工程的目标文件夹；</li><li>c、去掉Generate initialization list during languch项复选框的选中状态；</li><li>d、选中copy resources to destination（拷贝资源到目标文件夹）项；</li><li>e、选中use relative paths（使用相对路径）项；</li><li>f、选中include custom file（包含自定义文件）项；</li><li>g、选中batch resources when possible项；</li><li>h、选中launch correlator in separate console（在一个单独的控制台中启动新的correlator）；</li></ul><p>其余默认即可，点击完成按钮，导出apama工程成功。</p><h3 id="部署工程-1"><a href="#部署工程-1" class="headerlink" title="部署工程"></a>部署工程</h3><p>拷贝导出的apama工程文件夹到服务器上，修改用户环境变量，增加apama安装目录的环境变量。<br>linux服务器在~/.bash_profile中增加$APAMA_HOME/Apama/bin/apama_env.sh导入。<br>window服务器在cmd中首先call %APAMA_HOME%\Apama\bin\apama_env.bat。<br>然后进入工程目录，调用startProject.sh或者startProject.bat即可启动apama工程。</p><p>停止工程则需要调用stopProject.sh或者stopProject.bat。</p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>1、修改apama工程的socket端口。<br>在导出的ant工程文件夹中的environment.properties文件中，default.port项为apama的默认端口，修改这个配置项。<br>2、apama在服务器上运行成功，但是通信不正常。<br>检查工程是否成功启动，如果启动，能连接上但是通信异常则有可能时correlator启动成功，但是工程没有正确启动，检查environment.properties中apama的环境变量是否正确，主要APAMA_HOME、APAMA_WORK、APAMA_FOUNDATION_HOME几个参数，涉及到apama安装目录、授权文件、扩展库等。<br>3、取消启动dashboard。<br>默认的startProject脚本会传递all参数给ant，导出的build.xml中target名称为all的包含了三个项（start, adapters, dashboards），如果项目中包含了dashboard则会启动，不想启动的话，修改build.xml中all的target去掉dashboards。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;apama开发时可以使用apama的Software AG Designer工具开发和测试。但是在项目上线的时候，需要发布到服务器环境中，本文记录apama发布过程。&lt;br&gt;
    
    </summary>
    
      <category term="后端" scheme="http://lehoon.cn/categories/backend/"/>
    
    
      <category term="apama" scheme="http://lehoon.cn/tags/apama/"/>
    
      <category term="deploy" scheme="http://lehoon.cn/tags/deploy/"/>
    
      <category term="发布" scheme="http://lehoon.cn/tags/%E5%8F%91%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>SuSE 15.0安装备忘</title>
    <link href="http://lehoon.cn/backend/2018/10/12/suse-leap15-install-note.html"/>
    <id>http://lehoon.cn/backend/2018/10/12/suse-leap15-install-note.html</id>
    <published>2018-10-12T09:16:13.000Z</published>
    <updated>2018-10-12T09:28:46.623Z</updated>
    
    <content type="html"><![CDATA[<p>SuSE leap 15.0安装记录，主要配置ip、关闭防火墙、启动sshd、修改hostname等，逐步完善。<br><a id="more"></a></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>在虚拟机中安装SuSE leap 15.0， 主要用于测试系统环境搭建使用，每台服务器分配了8G内存，4个cpu，50G磁盘。后期资源紧张的时候可以动态调整资源。<br><a href="https://download.opensuse.org/distribution/leap/15.0/iso/openSUSE-Leap-15.0-DVD-x86_64.iso?mirrorlist" target="_blank" rel="noopener">文件下载地址</a>, 选择一个中国的镜像源下载，速度比较快。</p><h2 id="安装后配置"><a href="#安装后配置" class="headerlink" title="安装后配置"></a>安装后配置</h2><h3 id="禁用防火墙"><a href="#禁用防火墙" class="headerlink" title="禁用防火墙"></a>禁用防火墙</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="builtin-name">disable</span> firewalld</span><br></pre></td></tr></table></figure><h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w kernel.<span class="attribute">hostname</span>=servername</span><br></pre></td></tr></table></figure><p>编辑/etc/hostname文件，修改主机名与上面相同。</p><h3 id="修改IP地址"><a href="#修改IP地址" class="headerlink" title="修改IP地址"></a>修改IP地址</h3><p>编辑/etc/sysconfig/network/ifcfg-eth0文件，编辑如下内容<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">BOOTPROTO</span>=<span class="string">'static'</span></span><br><span class="line"><span class="attr">BROADCAST</span>=<span class="string">'255.255.255.0'</span></span><br><span class="line"><span class="comment">#ETHTOOL_OPTIONS=''</span></span><br><span class="line"><span class="attr">IPADDR</span>=<span class="string">'192.168.1.57'</span></span><br><span class="line"><span class="comment">#MTU=''</span></span><br><span class="line"><span class="attr">NAME</span>=<span class="string">'server001'</span></span><br><span class="line"><span class="attr">NETMASK</span>=<span class="string">'255.255.255.0'</span></span><br><span class="line"><span class="comment">#NETWORK=''</span></span><br><span class="line"><span class="comment">#REMOTE_IPADDR=''</span></span><br><span class="line"><span class="attr">STARTMODE</span>=<span class="string">'auto'</span></span><br><span class="line"><span class="attr">DHCLIENT_SET_DEFAULT_ROUTE</span>=<span class="string">'yes'</span></span><br><span class="line"><span class="attr">ZONE</span>=public</span><br><span class="line"><span class="attr">GATEWAY</span>=<span class="number">192.168</span>.<span class="number">1.1</span></span><br><span class="line"><span class="attr">DNS1</span>=<span class="number">192.168</span>.<span class="number">1.1</span></span><br></pre></td></tr></table></figure></p><p>把网关地址、ip地址根据自己的网络环境修改一个值。</p><p>编辑/etc/resolv.conf文件，编辑网关地址<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nameserver</span> 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.1</span></span><br></pre></td></tr></table></figure></p><h3 id="sshd服务自启动"><a href="#sshd服务自启动" class="headerlink" title="sshd服务自启动"></a>sshd服务自启动</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig sshd <span class="keyword">on</span></span><br></pre></td></tr></table></figure><h3 id="安装-卸载软件"><a href="#安装-卸载软件" class="headerlink" title="安装/卸载软件"></a>安装/卸载软件</h3><p>在suse中安装、卸载软件使用zypper可以完成。<br>安装软件包：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zypper <span class="keyword">install</span> packagename</span><br></pre></td></tr></table></figure></p><p>卸载软件包：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zyyper <span class="builtin-name">remove</span>  packagename</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SuSE leap 15.0安装记录，主要配置ip、关闭防火墙、启动sshd、修改hostname等，逐步完善。&lt;br&gt;
    
    </summary>
    
      <category term="后端" scheme="http://lehoon.cn/categories/backend/"/>
    
    
      <category term="SuSE" scheme="http://lehoon.cn/tags/SuSE/"/>
    
      <category term="leap" scheme="http://lehoon.cn/tags/leap/"/>
    
      <category term="15" scheme="http://lehoon.cn/tags/15/"/>
    
  </entry>
  
  <entry>
    <title>EhCache缓存使用</title>
    <link href="http://lehoon.cn/backend/2018/10/09/ehcache-note.html"/>
    <id>http://lehoon.cn/backend/2018/10/09/ehcache-note.html</id>
    <published>2018-10-09T02:49:06.000Z</published>
    <updated>2018-10-09T04:15:45.866Z</updated>
    
    <content type="html"><![CDATA[<p>ehcache是一个纯Java实现的进程内缓存实现，具有快速精简等特点。有单机版本、分布式实现版本。主要针对基于java开发的项目使用。支持磁盘持久化及磁盘load到内存。<br><a id="more"></a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>EhCache是基于标志的开源缓存，有很好的性能，可扩展。因为功能强大、经过测试的、功能全而广泛的应用与Java开发的系统中。支持进程内、混合进程内/进程外继承部署。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>1、单机版本的ehcache是jvm进程内缓存，不走网卡，速度快、效率高。<br>2、冷热数据单独处理不方便，正常情况下数据都是放在内存中，超过配置阈值后才会进行持久化磁盘处理。<br>3、数据的持久化需要在配置文件中配置才会进行，否则ehcache关闭后会删除掉缓存的磁盘文件。<br>4、如果项目中缓存分类比较多，分类又需要单独配置参数的情况，则配置文件就会比较大，比较麻烦。<br>5、默认依赖于classpath下的ehcache.xml配置文件，如果名称不同则需要明确指明配置文件。</p><h3 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Api使用"><a href="#Api使用" class="headerlink" title="Api使用"></a>Api使用</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个manager对象</span></span><br><span class="line"><span class="keyword">final</span> CacheManager cacheManager = <span class="keyword">new</span> CacheManager();</span><br><span class="line"><span class="comment">// 创建一个cache对象，类似与map</span></span><br><span class="line"><span class="keyword">final</span> Cache cache = cacheManager.getCache(<span class="string">"hello-world"</span>);</span><br><span class="line"><span class="comment">// 定义一个缓存对象的key值</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">String</span> <span class="built_in">key</span> = <span class="string">"greeting"</span>;</span><br><span class="line"><span class="comment">// 创建一个缓存的基本存储对象Element</span></span><br><span class="line"><span class="keyword">final</span> Element putGreeting = <span class="keyword">new</span> Element(<span class="built_in">key</span>, <span class="string">"Hello, World!"</span>);</span><br><span class="line"><span class="comment">// 把实际的缓存对象放入到cache对象中去</span></span><br><span class="line">cache.put(putGreeting);</span><br><span class="line"><span class="comment">// 从缓存中读取缓存内容</span></span><br><span class="line"><span class="keyword">final</span> Element getGreeting = cache.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line"><span class="comment">// 打印缓存的内容</span></span><br><span class="line">System.out.<span class="built_in">println</span>(getGreeting.getObjectValue());</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>配置文件样例<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">updateCheck</span>=<span class="string">"false"</span> <span class="attr">name</span>=<span class="string">"defaultCache"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"../temp/lehoon/ehcache"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">maxEntriesLocalHeap:堆内存中最大缓存对象数</span></span><br><span class="line"><span class="comment">eternal:对象是否永久有效，一但设置了，timeout将不起作用</span></span><br><span class="line"><span class="comment">overflowToDisk:当缓存达到maxElementsInMemory值是,是否允许溢出到磁盘</span></span><br><span class="line"><span class="comment">timeToIdleSeconds:当缓存闲置n秒后销毁</span></span><br><span class="line"><span class="comment">timeToLiveSeconds:当缓存存活n秒后销毁</span></span><br><span class="line"><span class="comment">maxEntriesLocalDisk:硬盘最大缓存个数</span></span><br><span class="line"><span class="comment">diskPersistent:磁盘缓存在JVM重新启动时是否保持</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 默认缓存配置-当不配置缓存信息时使用此配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag"><span class="attr">maxEntriesLocalHeap</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag"><span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag"><span class="attr">overflowToDisk</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">timeToIdleSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag"><span class="attr">timeToLiveSeconds</span>=<span class="string">"86400"</span></span></span><br><span class="line"><span class="tag"><span class="attr">maxEntriesLocalDisk</span>=<span class="string">"100000"</span></span></span><br><span class="line"><span class="tag"><span class="attr">diskPersistent</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 系统缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">"SYS_CACHE"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxEntriesLocalHeap</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag"><span class="attr">timeToLiveSeconds</span>=<span class="string">"86400"</span></span></span><br><span class="line"><span class="tag"><span class="attr">maxEntriesLocalDisk</span>=<span class="string">"10000000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag"><span class="attr">diskPersistent</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 订单缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">"BILLING"</span></span></span><br><span class="line"><span class="tag"><span class="attr">maxEntriesLocalHeap</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag"><span class="attr">eternal</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">overflowToDisk</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">timeToIdleSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag"><span class="attr">diskPersistent</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bootstrapCacheLoaderFactory</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"net.sf.ehcache.store.DiskStoreBootstrapCacheLoaderFactory"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">properties</span>=<span class="string">"bootstrapAsynchronously=true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bootstrapCacheLoaderFactory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="使用常见问题"><a href="#使用常见问题" class="headerlink" title="使用常见问题"></a>使用常见问题</h2><h3 id="删除缓存对象方法"><a href="#删除缓存对象方法" class="headerlink" title="删除缓存对象方法"></a>删除缓存对象方法</h3><p>删除缓存cache对象的时候，使用CacheManager.removeCache方法，不能直接delete删除。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除cache对象</span></span><br><span class="line"><span class="comment"> * @param ehCacheName</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> removeCache(<span class="keyword">Object</span> ehCacheName) &#123;</span><br><span class="line">    <span class="keyword">String</span> name = ehCacheName.toString();</span><br><span class="line">    <span class="keyword">if</span> (cacheManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.cacheManager = (CacheManager) SpringContextHolder.getBean(<span class="string">"cacheManager"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cacheManager.removeCache(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="检查缓存是否可用状态"><a href="#检查缓存是否可用状态" class="headerlink" title="检查缓存是否可用状态"></a>检查缓存是否可用状态</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isAlive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cacheManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">        cacheManager = (CacheManager) SpringContextHolder.getBean(<span class="string">"cacheManager"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> status = cacheManager.getStatus().intValue();</span><br><span class="line">    <span class="keyword">return</span> status == Status.STATUS_ALIVE.intValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缓存持久化及加载"><a href="#缓存持久化及加载" class="headerlink" title="缓存持久化及加载"></a>缓存持久化及加载</h3><p>缓存持久化是从内存持久化到磁盘，默认ehcache停止的时候会删除掉运行期间落盘的磁盘文件，因此需要配置告诉ehcache停止时候不需要删除缓存文件，配置参数如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">updateCheck</span>=<span class="string">"false"</span> <span class="attr">name</span>=<span class="string">"defaultCache"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"../temp/lehoon/ehcache"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">maxEntriesLocalHeap:堆内存中最大缓存对象数</span></span><br><span class="line"><span class="comment">eternal:对象是否永久有效，一但设置了，timeout将不起作用</span></span><br><span class="line"><span class="comment">overflowToDisk:当缓存达到maxElementsInMemory值是,是否允许溢出到磁盘</span></span><br><span class="line"><span class="comment">timeToIdleSeconds:当缓存闲置n秒后销毁</span></span><br><span class="line"><span class="comment">timeToLiveSeconds:当缓存存活n秒后销毁</span></span><br><span class="line"><span class="comment">maxEntriesLocalDisk:硬盘最大缓存个数</span></span><br><span class="line"><span class="comment">diskPersistent:磁盘缓存在JVM重新启动时是否保持</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 订单缓存，通过eternal=true配持久化缓存文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">"BILLING"</span></span></span><br><span class="line"><span class="tag"><span class="attr">maxEntriesLocalHeap</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag"><span class="attr">eternal</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">overflowToDisk</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">timeToIdleSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag"><span class="attr">diskPersistent</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>持久化的缓存在ehcache启动的时候加载到内存中去，需要增加配置bootstrapCacheLoaderFactory属性，如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">updateCheck</span>=<span class="string">"false"</span> <span class="attr">name</span>=<span class="string">"defaultCache"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"../temp/lehoon/ehcache"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">maxEntriesLocalHeap:堆内存中最大缓存对象数</span></span><br><span class="line"><span class="comment">eternal:对象是否永久有效，一但设置了，timeout将不起作用</span></span><br><span class="line"><span class="comment">overflowToDisk:当缓存达到maxElementsInMemory值是,是否允许溢出到磁盘</span></span><br><span class="line"><span class="comment">timeToIdleSeconds:当缓存闲置n秒后销毁</span></span><br><span class="line"><span class="comment">timeToLiveSeconds:当缓存存活n秒后销毁</span></span><br><span class="line"><span class="comment">maxEntriesLocalDisk:硬盘最大缓存个数</span></span><br><span class="line"><span class="comment">diskPersistent:磁盘缓存在JVM重新启动时是否保持</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 订单缓存 通过bootstrapCacheLoaderFactory参数配置启动加载到内存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">"BILLING"</span></span></span><br><span class="line"><span class="tag"><span class="attr">maxEntriesLocalHeap</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag"><span class="attr">eternal</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">overflowToDisk</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">timeToIdleSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag"><span class="attr">diskPersistent</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bootstrapCacheLoaderFactory</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"net.sf.ehcache.store.DiskStoreBootstrapCacheLoaderFactory"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">properties</span>=<span class="string">"bootstrapAsynchronously=true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bootstrapCacheLoaderFactory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ehcache是一个纯Java实现的进程内缓存实现，具有快速精简等特点。有单机版本、分布式实现版本。主要针对基于java开发的项目使用。支持磁盘持久化及磁盘load到内存。&lt;br&gt;
    
    </summary>
    
      <category term="后端" scheme="http://lehoon.cn/categories/backend/"/>
    
    
      <category term="cache" scheme="http://lehoon.cn/tags/cache/"/>
    
      <category term="ehcache" scheme="http://lehoon.cn/tags/ehcache/"/>
    
  </entry>
  
  <entry>
    <title>art-template使用笔记</title>
    <link href="http://lehoon.cn/frontend/2018/09/27/art-template-note.html"/>
    <id>http://lehoon.cn/frontend/2018/09/27/art-template-note.html</id>
    <published>2018-09-27T08:37:05.000Z</published>
    <updated>2018-09-27T09:21:38.795Z</updated>
    
    <content type="html"><![CDATA[<p>art-template是一款开源的js的模板引擎，渲染速度比较快，使用后可以介绍不少的代码量，本文记录下使用过程中遇到的问题及解决方法。<br><a id="more"></a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="http://aui.github.io/art-template/zh-cn/" target="_blank" rel="noopener">官方网站</a><br><a href="https://github.com/aui/art-template" target="_blank" rel="noopener">下载地址</a></p><p>art-template可以应用于前端js、koa、nodejs、webpack、express中。定义模板后，组织数据对象，然后使用template渲染出结果html片段。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>1、使用中html原样输出，没有被浏览器解析成dom。<br>解决方法：定义template.defaults.escape=false;关闭编码输出功能<br>2、使用template(id, data);返回一个function。<br>解决方法：使用template返回一个渲染render方法，然后使用该方法使用数据后渲染出最后的html片段。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cacheRender = template(tplSource); <span class="comment">//生成渲染函数对象</span></span><br><span class="line"><span class="keyword">var</span> destHtml = cacheRender(<span class="keyword">data</span>);  <span class="comment">//使用数据渲染html片段</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;art-template是一款开源的js的模板引擎，渲染速度比较快，使用后可以介绍不少的代码量，本文记录下使用过程中遇到的问题及解决方法。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://lehoon.cn/categories/frontend/"/>
    
    
      <category term="template" scheme="http://lehoon.cn/tags/template/"/>
    
      <category term="javascript" scheme="http://lehoon.cn/tags/javascript/"/>
    
      <category term="cache" scheme="http://lehoon.cn/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>apama笔记</title>
    <link href="http://lehoon.cn/backend/2018/09/25/apama-note.html"/>
    <id>http://lehoon.cn/backend/2018/09/25/apama-note.html</id>
    <published>2018-09-25T02:12:16.000Z</published>
    <updated>2018-09-25T03:11:43.958Z</updated>
    
    <content type="html"><![CDATA[<p>记录apama学习笔记，apama中任何对象都可以理解未一个事件，只要注册了每个对象事件监听，在apama进程接收消息队列中有该对象时，就会进行对象匹配，如果满足条件就会触发一个事件监听。<br><a id="more"></a></p><h2 id="RPC序列化"><a href="#RPC序列化" class="headerlink" title="RPC序列化"></a>RPC序列化</h2><p>apma的rpc通信过程中数据序列化是文本字符串序列化，不是二进制序列化。序列化格式为：packageName + eventName + properties属性。 例如：”QRY_apamax.atmfraud.DetectRepeatedMaxWithdrawals”, 1, “*”, [“600”]。</p><p>序列化顺序严格按照事件定义时候的顺序来组织，数据格式也要对应，否则会出现rpc通信过程中事件丢失问题。</p><h2 id="工程目录约定"><a href="#工程目录约定" class="headerlink" title="工程目录约定"></a>工程目录约定</h2><h3 id="event目录"><a href="#event目录" class="headerlink" title="event目录"></a>event目录</h3><p>该目录主要包含apama进程启动的时候预定义的一些事件，实现系统测试、初始化一些系统事件使用。<br>文件名：后缀名为evt<br>格式：事件定义全路径(属性定义)<br>例如：<br>//预生产的事件列表，按照顺序生产后放入当前correlator的消息队列<br>com.lehoon.apama.EventC(“C1”)<br>com.lehoon.apama.EventA(“A1”)<br>com.lehoon.apama.EventF(“F1”)</p><h3 id="dashboards目录"><a href="#dashboards目录" class="headerlink" title="dashboards目录"></a>dashboards目录</h3><p>apama本身支持cs应用，apama的client端就是dashboards面板，支持控件拖拽式开发，动态绑定运行时的dataview实例。 缺点就是不支持高分屏、用户体验度不好。</p><h3 id="monitor目录"><a href="#monitor目录" class="headerlink" title="monitor目录"></a>monitor目录</h3><p>apama的主要逻辑代码存放目录，文件后缀名为mon，类似与java的controller+service，在monitor中可以注册关心的事件处理逻辑代码。</p><h3 id="queries目录"><a href="#queries目录" class="headerlink" title="queries目录"></a>queries目录</h3><p>该目录存放自定义的queries文件，后缀名为qry。Query是epl程序执行的一个基本单元。 epl另外的执行单元是monitor，一个monitor不能能包括一个query。一个query不能包括一个monitor。<br>query适用于通过事件来提供大量真实世界信息的应用程序。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录apama学习笔记，apama中任何对象都可以理解未一个事件，只要注册了每个对象事件监听，在apama进程接收消息队列中有该对象时，就会进行对象匹配，如果满足条件就会触发一个事件监听。&lt;br&gt;
    
    </summary>
    
      <category term="后端" scheme="http://lehoon.cn/categories/backend/"/>
    
    
      <category term="apama" scheme="http://lehoon.cn/tags/apama/"/>
    
      <category term="epl" scheme="http://lehoon.cn/tags/epl/"/>
    
  </entry>
  
  <entry>
    <title>svn查看日志显示时间为1970解决方法</title>
    <link href="http://lehoon.cn/orther/2018/03/27/svn-showlog-date-1970.html"/>
    <id>http://lehoon.cn/orther/2018/03/27/svn-showlog-date-1970.html</id>
    <published>2018-03-27T02:47:33.000Z</published>
    <updated>2018-09-22T13:31:16.492Z</updated>
    
    <content type="html"><![CDATA[<p>svn查看日志(show log)显示日期为1970年的解决方法，svn查看日志时候，不显示日志。<br><a id="more"></a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>通过TortoiseSvn查看svn仓库日志的时候，日期一直在1969-1970，不能选择其他日期，导致svn的提交记录不能显示。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="修改svn配置文件"><a href="#修改svn配置文件" class="headerlink" title="修改svn配置文件"></a>修改svn配置文件</h3><p>编辑svnserve.conf文件<br>设置anon-access=none</p><h3 id="修改认证配置文件"><a href="#修改认证配置文件" class="headerlink" title="修改认证配置文件"></a>修改认证配置文件</h3><p>编辑authz文件<br>添加<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[/]</span></span><br><span class="line">* =</span><br></pre></td></tr></table></figure></p><h3 id="重启svn服务"><a href="#重启svn服务" class="headerlink" title="重启svn服务"></a>重启svn服务</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svnserve -d -r /<span class="built_in">home</span>/svn/svnrepos</span><br></pre></td></tr></table></figure><p>清理TortoiseSvn的缓存信息，再次通过show log 查看，就可以发现日志已经出来了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;svn查看日志(show log)显示日期为1970年的解决方法，svn查看日志时候，不显示日志。&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="http://lehoon.cn/categories/orther/"/>
    
    
      <category term="svn" scheme="http://lehoon.cn/tags/svn/"/>
    
      <category term="show log" scheme="http://lehoon.cn/tags/show-log/"/>
    
      <category term="date error" scheme="http://lehoon.cn/tags/date-error/"/>
    
      <category term="1970" scheme="http://lehoon.cn/tags/1970/"/>
    
  </entry>
  
  <entry>
    <title>oracle12c手动创建cdb实例</title>
    <link href="http://lehoon.cn/backend/2018/03/23/oracle12c-create-instance.html"/>
    <id>http://lehoon.cn/backend/2018/03/23/oracle12c-create-instance.html</id>
    <published>2018-03-23T08:10:17.000Z</published>
    <updated>2018-09-22T13:31:09.484Z</updated>
    
    <content type="html"><![CDATA[<p>oracle12c通过手动创建cdb实例。<br><a id="more"></a></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统： centos 7.3 64bit<br>oracle版本：Release 12.2.0.1.0 Production</p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="指定sid"><a href="#指定sid" class="headerlink" title="指定sid"></a>指定sid</h3><p>修改~/.bash_profile文件，修改ORACLE_SID名称<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">ORACLE_SID</span>=dpf</span><br></pre></td></tr></table></figure></p><h3 id="创建初始化文件"><a href="#创建初始化文件" class="headerlink" title="创建初始化文件"></a>创建初始化文件</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">oracle@db001:/home/oracle$ cat initdbdpf.ora </span></span><br><span class="line">db_name='dpf'</span><br><span class="line">memory_target=2G</span><br><span class="line">processes=150</span><br><span class="line">db_block_size=8192</span><br><span class="line">db_domain=''</span><br><span class="line">diagnostic_dest='/oracle'</span><br><span class="line">dispatchers='(PROTOCOL=TCP) (SERVICE=dpf)'</span><br><span class="line">open_cursors=300</span><br><span class="line">remote_login_passwordfile='EXCLUSIVE'</span><br><span class="line">undo_tablespace='undotbs1'</span><br><span class="line">control_files='/oracle/oradata/dpf/control01.ctl', '/oracle/oradata/dpf/control02.ctl'</span><br><span class="line">compatible='12.0.0'</span><br><span class="line">audit_file_dest='/oracle/admin/dpf/adump'</span><br><span class="line">audit_trail='db'</span><br><span class="line">enable_pluggable_database=true</span><br></pre></td></tr></table></figure><p>保存到/home/oracle/initdbdpf.ora。</p><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><p>创建需要的文件目录<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="regexp">/oracle/</span>admin<span class="regexp">/dpf/</span>adump</span><br></pre></td></tr></table></figure></p><h3 id="连接到oracle"><a href="#连接到oracle" class="headerlink" title="连接到oracle"></a>连接到oracle</h3><p>通过sysdba连接到oracle<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">oracle<span class="variable">@db001</span><span class="symbol">:/home/oracle</span><span class="variable">$ </span>sqlplus /nolog</span><br><span class="line"></span><br><span class="line">SQL*<span class="symbol">Plus:</span> Release <span class="number">12.2</span>.<span class="number">0</span>.<span class="number">1.0</span> Production on Fri Mar <span class="number">23</span> <span class="number">16</span><span class="symbol">:</span><span class="number">20</span><span class="symbol">:</span><span class="number">00</span> <span class="number">2018</span></span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">1982</span>, <span class="number">2016</span>, Oracle.  All rights reserved.</span><br><span class="line"></span><br><span class="line">SQL&gt; conn / as sysdba</span><br></pre></td></tr></table></figure></p><h3 id="创建spfile文件"><a href="#创建spfile文件" class="headerlink" title="创建spfile文件"></a>创建spfile文件</h3><p>从initdborcl.ora创建spfile<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; <span class="built_in">create</span> spfile <span class="built_in">from</span> pfile=<span class="string">'/home/oracle/initdbdpf.ora'</span></span><br></pre></td></tr></table></figure></p><h3 id="启动实例"><a href="#启动实例" class="headerlink" title="启动实例"></a>启动实例</h3><p>使用nomount启动<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt;startup nomount;</span><br><span class="line">ORACLE<span class="built_in"> instance </span>started.</span><br><span class="line"></span><br><span class="line">Total<span class="built_in"> System </span>Global<span class="built_in"> Area </span>2147483648 bytes</span><br><span class="line">Fixed Size                  2926472 bytes</span><br><span class="line">Variable Size            1291847800 bytes</span><br><span class="line">Database Buffers          838860800 bytes</span><br><span class="line">Redo Buffers               13848576 bytes</span><br></pre></td></tr></table></figure></p><h3 id="创建数据库实例"><a href="#创建数据库实例" class="headerlink" title="创建数据库实例"></a>创建数据库实例</h3><p>准备语句<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt;<span class="built_in">create</span> database dpf</span><br><span class="line">  user sys identified <span class="keyword">by</span> oracle123</span><br><span class="line">  user <span class="keyword">system</span> identified <span class="keyword">by</span> oracle123</span><br><span class="line">  logfile group <span class="number">1</span> (<span class="string">'/oracle/oradata/dpf/redo01a.log'</span>,<span class="string">'/oracle/oradata/dpf/redo01b.log'</span>) size <span class="number">100</span>m,</span><br><span class="line">          group <span class="number">2</span> (<span class="string">'/oracle/oradata/dpf/redo02a.log'</span>,<span class="string">'/oracle/oradata/dpf/redo02b.log'</span>) size <span class="number">100</span>m, </span><br><span class="line">          group <span class="number">3</span> (<span class="string">'/oracle/oradata/dpf/redo03a.log'</span>,<span class="string">'/oracle/oradata/dpf/redo03b.log'</span>) size <span class="number">100</span>m</span><br><span class="line">  maxloghistory <span class="number">1</span></span><br><span class="line">  maxlogfiles <span class="number">16</span></span><br><span class="line">  maxlogmembers <span class="number">3</span></span><br><span class="line">  maxdatafiles <span class="number">1024</span></span><br><span class="line">  <span class="keyword">character</span> <span class="built_in">set</span> al32utf8</span><br><span class="line">  national <span class="keyword">character</span> <span class="built_in">set</span> al16utf16</span><br><span class="line">  extent management <span class="built_in">local</span></span><br><span class="line">  datafile <span class="string">'/oracle/oradata/dpf/system01.dbf'</span> size <span class="number">700</span>m reuse autoextend <span class="keyword">on</span> <span class="title">next</span> <span class="title">10240k</span> <span class="title">maxsize</span> <span class="title">unlimited</span></span><br><span class="line">  sysaux datafile <span class="string">'/oracle/oradata/dpf/sysaux01.dbf'</span> size <span class="number">550</span>m reuse autoextend <span class="keyword">on</span> <span class="title">next</span> <span class="title">10240k</span> <span class="title">maxsize</span> <span class="title">unlimited</span></span><br><span class="line">  default tablespace users</span><br><span class="line">    datafile <span class="string">'/oracle/oradata/dpf/users01.dbf'</span> size <span class="number">500</span>m reuse autoextend <span class="keyword">on</span> <span class="title">maxsize</span> <span class="title">unlimited</span></span><br><span class="line">  default temporary tablespace tempts1</span><br><span class="line">    tempfile <span class="string">'/oracle/oradata/dpf/temp01.dbf'</span> size <span class="number">20</span>m reuse autoextend <span class="keyword">on</span> <span class="title">next</span> <span class="title">640k</span> <span class="title">maxsize</span> <span class="title">unlimited</span></span><br><span class="line">  undo tablespace undotbs1</span><br><span class="line">    datafile <span class="string">'/oracle/oradata/dpf/undotbs01.dbf'</span> size <span class="number">200</span>m reuse autoextend <span class="keyword">on</span> <span class="title">next</span> <span class="title">5120k</span> <span class="title">maxsize</span> <span class="title">unlimited</span></span><br><span class="line">  enable pluggable database</span><br><span class="line">    seed</span><br><span class="line">    file_name_convert = (<span class="string">'/oracle/oradata/dpf'</span>,</span><br><span class="line">                         <span class="string">'/oracle/oradata/dpf/pdb1'</span>)</span><br><span class="line">    <span class="keyword">system</span> datafiles size <span class="number">125</span>m autoextend <span class="keyword">on</span> <span class="title">next</span> <span class="title">10m</span> <span class="title">maxsize</span> <span class="title">unlimited</span></span><br><span class="line">    sysaux datafiles size <span class="number">100</span>m</span><br><span class="line">    user_data tablespace usertbs</span><br><span class="line">    datafile <span class="string">'/oracle/oradata/dpf/pdb1/usertbs01.dbf'</span> size <span class="number">200</span>m reuse autoextend <span class="keyword">on</span> <span class="title">maxsize</span> <span class="title">unlimited</span>;</span><br></pre></td></tr></table></figure></p><p>执行完后，通过运行sql脚本创建数据字典视图<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@?/<span class="keyword">rdbms</span>/<span class="keyword">admin</span>/<span class="keyword">catcdb</span>.<span class="keyword">sql</span></span><br></pre></td></tr></table></figure></p><p>执行命令会提示输入1、2参数<br>Enter value for 1: /oracle/product/12.2.0.1/rdbms/admin<br>Enter value for 2: /oracle/product/12.2.0.1/rdbms/admin/catcdb.pl</p><p>此处会报错，报错内容如下<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Can't locate Term/ReadKey.pm <span class="keyword">in</span> @INC (@INC contains: /U01/<span class="keyword">app</span>/oracle/product/12.2/rdbms/admin /usr/<span class="keyword">local</span>/lib64/perl5 /usr/<span class="keyword">local</span>/share/perl5 /usr/lib64/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib64/perl5 /usr/share/perl5 .) at /U01/<span class="keyword">app</span>/oracle/product/12.2/rdbms/admin/catcdb.<span class="keyword">pl</span> <span class="keyword">line</span> 30.</span><br><span class="line"></span><br><span class="line">BEGIN failed--compilation aborted at /U01/<span class="keyword">app</span>/oracle/product/12.2/rdbms/admin/catcdb.<span class="keyword">pl</span> <span class="keyword">line</span> 30.</span><br></pre></td></tr></table></figure></p><p>解决办法；<br>1、设定环境变量PATH值，增加ORACLE下perl环境变量<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=<span class="variable">$ORACLE_HOME</span><span class="regexp">/perl/</span>bin:<span class="variable">$ORACLE_HOME</span><span class="regexp">/jdk/</span>bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></p><p>2、修改/oracle/product/12.2.0.1/rdbms/admin/catcdb.pl文件<br>修改35行，把util修改成Util。</p><p>3、先退出sqlplus环境， 进入$ORACLE_HOME/perl/lib/5.22.0/x86_64-linux-thread-multi/Hash目录<br>然后在执行该sql即可。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、修改catcdb.pl文件<span class="number">35</span>行把unil修改成Util</span><br><span class="line"><span class="number">2</span>、进入hash目录后，进入sqlplus环境</span><br><span class="line">oracle<span class="meta">@txbds</span>-dpf-<span class="string">db001:</span><span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>perl<span class="regexp">/lib/</span><span class="number">5.22</span><span class="number">.0</span><span class="regexp">/x86_64-linux-thread-multi$ cd /</span>oracle<span class="regexp">/product/</span><span class="number">12.2</span><span class="number">.0</span><span class="number">.1</span><span class="regexp">/perl/</span>lib<span class="regexp">/5.22.0/</span>x86_64-linux-thread-multi<span class="regexp">/Hash/</span></span><br><span class="line">oracle<span class="meta">@txbds</span>-dpf-<span class="string">db001:</span><span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>perl<span class="regexp">/lib/</span><span class="number">5.22</span><span class="number">.0</span><span class="regexp">/x86_64-linux-thread-multi/</span>Hash$ ll</span><br><span class="line">total <span class="number">28</span></span><br><span class="line">drwxr-xr-x <span class="number">2</span> oracle oinstall  <span class="number">4096</span> Apr <span class="number">20</span>  <span class="number">2017</span> Util</span><br><span class="line">-rwxr-x--- <span class="number">1</span> oracle oinstall <span class="number">23392</span> May <span class="number">12</span>  <span class="number">2016</span> Util.pm</span><br><span class="line">oracle<span class="meta">@txbds</span>-dpf-<span class="string">db001:</span><span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>perl<span class="regexp">/lib/</span><span class="number">5.22</span><span class="number">.0</span><span class="regexp">/x86_64-linux-thread-multi/</span>Hash$ sqlplus /nolog</span><br><span class="line"></span><br><span class="line">SQL*<span class="string">Plus:</span> Release <span class="number">12.2</span><span class="number">.0</span><span class="number">.1</span><span class="number">.0</span> Production on Fri Mar <span class="number">23</span> <span class="number">14</span>:<span class="number">03</span>:<span class="number">51</span> <span class="number">2018</span></span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">1982</span>, <span class="number">2016</span>, Oracle.  All rights reserved.</span><br><span class="line"></span><br><span class="line">SQL&gt; conn / <span class="keyword">as</span> sysdba</span><br><span class="line">Connected.</span><br><span class="line">SQL&gt; @?/rdbms/admin/catcdb.sql</span><br><span class="line"></span><br><span class="line">SQL&gt; host perl -I &amp;&amp;rdbms_admin &amp;&amp;rdbms_admin_catcdb --logDirectory &amp;&amp;1 --logFilename &amp;&amp;2</span><br><span class="line">Enter value for 1: <span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms/admin</span><br><span class="line">Enter value <span class="keyword">for</span> <span class="number">2</span>: <span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>catcdb.pl</span><br><span class="line">Enter <span class="keyword">new</span> password <span class="keyword">for</span> <span class="string">SYS:</span> oracle123</span><br><span class="line">Enter <span class="keyword">new</span> password <span class="keyword">for</span> <span class="string">SYSTEM:</span> oracle123</span><br><span class="line">Enter temporary tablespace <span class="string">name:</span> dpf-temp</span><br><span class="line">No options to container mapping specified, no options will be installed <span class="keyword">in</span> any containers</span><br><span class="line"><span class="string">catcon:</span> ALL catcon-related output will be written to [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>catalog_catcon_14267.lst]</span><br><span class="line"><span class="string">catcon:</span> See [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>catalog*.log] files <span class="keyword">for</span> output generated by scripts</span><br><span class="line"><span class="string">catcon:</span> See [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>catalog_*.lst] files <span class="keyword">for</span> spool files, <span class="keyword">if</span> any</span><br><span class="line">catcon.<span class="string">pl:</span> completed successfully</span><br><span class="line"><span class="string">catcon:</span> ALL catcon-related output will be written to [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>catproc_catcon_14355.lst]</span><br><span class="line"><span class="string">catcon:</span> See [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>catproc*.log] files <span class="keyword">for</span> output generated by scripts</span><br><span class="line"><span class="string">catcon:</span> See [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>catproc_*.lst] files <span class="keyword">for</span> spool files, <span class="keyword">if</span> any</span><br><span class="line">catcon.<span class="string">pl:</span> completed successfully</span><br><span class="line"><span class="string">catcon:</span> ALL catcon-related output will be written to [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>catoctk_catcon_15507.lst]</span><br><span class="line"><span class="string">catcon:</span> See [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>catoctk*.log] files <span class="keyword">for</span> output generated by scripts</span><br><span class="line"><span class="string">catcon:</span> See [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>catoctk_*.lst] files <span class="keyword">for</span> spool files, <span class="keyword">if</span> any</span><br><span class="line">catcon.<span class="string">pl:</span> completed successfully</span><br><span class="line"><span class="string">catcon:</span> ALL catcon-related output will be written to [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>owminst_catcon_15593.lst]</span><br><span class="line"><span class="string">catcon:</span> See [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>owminst*.log] files <span class="keyword">for</span> output generated by scripts</span><br><span class="line"><span class="string">catcon:</span> See [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>owminst_*.lst] files <span class="keyword">for</span> spool files, <span class="keyword">if</span> any</span><br><span class="line">catcon.<span class="string">pl:</span> completed successfully</span><br><span class="line"><span class="string">catcon:</span> ALL catcon-related output will be written to [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>pupbld_catcon_16013.lst]</span><br><span class="line"><span class="string">catcon:</span> See [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>pupbld*.log] files <span class="keyword">for</span> output generated by scripts</span><br><span class="line"><span class="string">catcon:</span> See [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>pupbld_*.lst] files <span class="keyword">for</span> spool files, <span class="keyword">if</span> any</span><br><span class="line">catcon.<span class="string">pl:</span> completed successfully</span><br><span class="line"><span class="string">catcon:</span> ALL catcon-related output will be written to [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>pupbld_catcon_16097.lst]</span><br><span class="line"><span class="string">catcon:</span> See [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>pupbld*.log] files <span class="keyword">for</span> output generated by scripts</span><br><span class="line"><span class="string">catcon:</span> See [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>pupbld_*.lst] files <span class="keyword">for</span> spool files, <span class="keyword">if</span> any</span><br><span class="line"><span class="string">validate_script_path:</span> sqlplus script <span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>sqlplus<span class="regexp">/admin/</span>help/hlpbld does not exist or is unreadable</span><br><span class="line"><span class="string">catconExec:</span> empty Path returned by validate_script_path <span class="keyword">for</span> </span><br><span class="line">    SrcDir = <span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>sqlplus<span class="regexp">/admin/</span>help, FileName = hlpbld</span><br><span class="line">catcon.<span class="string">pl:</span> Unexpected error encountered <span class="keyword">in</span> catconExec; exiting</span><br><span class="line"><span class="string">exec_DB_script:</span> <span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>pupbld_catcon_16097_exec_DB_script.done did not need to be deleted before running a script</span><br><span class="line"><span class="string">exec_DB_script:</span> opened Reader and Writer</span><br><span class="line"><span class="string">exec_DB_script:</span> connected</span><br><span class="line"><span class="string">exec_DB_script:</span> executed set echo on</span><br><span class="line"></span><br><span class="line"><span class="string">exec_DB_script:</span> executed @@<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>pupbld_catcon_kill_sess_16097_ALL.sql</span><br><span class="line"></span><br><span class="line"><span class="string">exec_DB_script:</span> sent </span><br><span class="line">host sqlplus -v &gt; <span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>pupbld_catcon_16097_exec_DB_script.done to Writer</span><br><span class="line"><span class="string">exec_DB_script:</span> sent -exit- to Writer</span><br><span class="line"><span class="string">exec_DB_script:</span> closed Writer</span><br><span class="line"><span class="string">exec_DB_script:</span> marker was undefined; read and ignore output, <span class="keyword">if</span> any</span><br><span class="line"><span class="string">exec_DB_script:</span> finished reading and ignoring output</span><br><span class="line"><span class="string">exec_DB_script:</span> waiting <span class="keyword">for</span> child process to exit</span><br><span class="line"><span class="string">exec_DB_script:</span> child process exited</span><br><span class="line"><span class="string">sureunlink:</span> unlink(<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>pupbld_catcon_16097_exec_DB_script.done) succeeded after <span class="number">1</span> attempt(s)</span><br><span class="line"><span class="string">sureunlink:</span> verify that the file really no longer exists</span><br><span class="line"><span class="string">sureunlink:</span> confirmed that <span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>pupbld_catcon_16097_exec_DB_script.done no longer exists after <span class="number">1</span> attempts</span><br><span class="line"><span class="string">exec_DB_script:</span> deleted <span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>pupbld_catcon_16097_exec_DB_script.done after running a script</span><br><span class="line"><span class="string">exec_DB_script:</span> closed Reader</span><br><span class="line"><span class="string">exec_DB_script:</span> waitpid returned</span><br><span class="line"><span class="string">kill_sqlplus_sessions:</span> output produced <span class="keyword">in</span> exec_DB_script [</span><br><span class="line">    </span><br><span class="line">    SQL*<span class="string">Plus:</span> Release <span class="number">12.2</span><span class="number">.0</span><span class="number">.1</span><span class="number">.0</span> Production on Fri Mar <span class="number">23</span> <span class="number">14</span>:<span class="number">27</span>:<span class="number">09</span> <span class="number">2018</span></span><br><span class="line">    </span><br><span class="line">    Copyright (c) <span class="number">1982</span>, <span class="number">2016</span>, Oracle.  All rights reserved.</span><br><span class="line">    </span><br><span class="line">    SQL&gt; Connected.</span><br><span class="line">    SQL&gt; SQL&gt; SQL&gt; </span><br><span class="line">    SQL&gt; ALTER SYSTEM KILL SESSION <span class="string">'99,16498'</span> force timeout <span class="number">0</span> -- process <span class="number">16133</span></span><br><span class="line">      <span class="number">2</span>  /</span><br><span class="line">    </span><br><span class="line">    System altered.</span><br><span class="line">    </span><br><span class="line">    SQL&gt; </span><br><span class="line">    SQL&gt; SQL&gt; </span><br><span class="line">    SQL&gt; Disconnected from Oracle Database <span class="number">12</span>c Enterprise Edition Release <span class="number">12.2</span><span class="number">.0</span><span class="number">.1</span><span class="number">.0</span> - <span class="number">64</span>bit Production</span><br><span class="line">  ] end of output produced <span class="keyword">in</span> exec_DB_script</span><br><span class="line"><span class="string">catcon:</span> ALL catcon-related output will be written to [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>catclust_catcon_16148.lst]</span><br><span class="line"><span class="string">catcon:</span> See [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>catclust*.log] files <span class="keyword">for</span> output generated by scripts</span><br><span class="line"><span class="string">catcon:</span> See [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>catclust_*.lst] files <span class="keyword">for</span> spool files, <span class="keyword">if</span> any</span><br><span class="line">catcon.<span class="string">pl:</span> completed successfully</span><br><span class="line"><span class="string">catcon:</span> ALL catcon-related output will be written to [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>catfinal_catcon_16566.lst]</span><br><span class="line"><span class="string">catcon:</span> See [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>catfinal*.log] files <span class="keyword">for</span> output generated by scripts</span><br><span class="line"><span class="string">catcon:</span> See [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>catfinal_*.lst] files <span class="keyword">for</span> spool files, <span class="keyword">if</span> any</span><br><span class="line">catcon.<span class="string">pl:</span> completed successfully</span><br><span class="line"><span class="string">catcon:</span> ALL catcon-related output will be written to [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>catbundleapply_catcon_16650.lst]</span><br><span class="line"><span class="string">catcon:</span> See [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>catbundleapply*.log] files <span class="keyword">for</span> output generated by scripts</span><br><span class="line"><span class="string">catcon:</span> See [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>catbundleapply_*.lst] files <span class="keyword">for</span> spool files, <span class="keyword">if</span> any</span><br><span class="line">catcon.<span class="string">pl:</span> completed successfully</span><br><span class="line"><span class="string">catcon:</span> ALL catcon-related output will be written to [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>utlrp_catcon_16734.lst]</span><br><span class="line"><span class="string">catcon:</span> See [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>utlrp*.log] files <span class="keyword">for</span> output generated by scripts</span><br><span class="line"><span class="string">catcon:</span> See [<span class="regexp">/oracle/</span>product<span class="regexp">/12.2.0.1/</span>rdbms<span class="regexp">/admin/</span>utlrp_*.lst] files <span class="keyword">for</span> spool files, <span class="keyword">if</span> any</span><br><span class="line">catcon.<span class="string">pl:</span> completed successfully</span><br></pre></td></tr></table></figure></p><p>这样，数据库实例就创建好了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;oracle12c通过手动创建cdb实例。&lt;br&gt;
    
    </summary>
    
      <category term="后端" scheme="http://lehoon.cn/categories/backend/"/>
    
    
      <category term="oracle12c" scheme="http://lehoon.cn/tags/oracle12c/"/>
    
      <category term="cdb" scheme="http://lehoon.cn/tags/cdb/"/>
    
      <category term="instance" scheme="http://lehoon.cn/tags/instance/"/>
    
  </entry>
  
  <entry>
    <title>librdkafka配置参数详解</title>
    <link href="http://lehoon.cn/backend/2018/03/14/librdkafka-config.html"/>
    <id>http://lehoon.cn/backend/2018/03/14/librdkafka-config.html</id>
    <published>2018-03-14T03:09:24.000Z</published>
    <updated>2018-09-22T13:30:49.021Z</updated>
    
    <content type="html"><![CDATA[<p>librdkafka配置参数整理。<br><a id="more"></a></p><h2 id="全局配置参数"><a href="#全局配置参数" class="headerlink" title="全局配置参数"></a>全局配置参数</h2><p><a href="https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md" target="_blank" rel="noopener">原文地址</a></p><table><thead><tr><th>Property</th><th>C/P</th><th>Range</th><th>Default</th><th>Description              </th></tr></thead><tbody><tr><td>builtin.features</td><td>*</td><td></td><td>gzip, snappy, ssl, sasl, regex, lz4, sasl_gssapi, sasl_plain, sasl_scram, plugins</td><td>标示该librdkafka的支持的内建特性。应用程序可以查看或设置这些值来检查是否支持这些特性. <br><em>Type: CSV flags</em></td></tr><tr><td>client.id</td><td>*</td><td></td><td>rdkafka</td><td>客户端标识. <br><em>Type: string</em></td></tr><tr><td>metadata.broker.list</td><td>*</td><td></td><td></td><td>初始化的broker列表，host:port格式, 应用程序可以使用rd_kafka_brokers_add()动态添加broker. <br><em>Type: string</em></td></tr><tr><td>bootstrap.servers</td><td>*</td><td></td><td></td><td>参考 metadata.broker.list</td></tr><tr><td>message.max.bytes</td><td>*</td><td>1000 .. 1000000000</td><td>1000000</td><td>消息发送最大字节数. <br><em>Type: integer</em></td></tr><tr><td>message.copy.max.bytes</td><td>*</td><td>0 .. 1000000000</td><td>65535</td><td>消息缓冲区最大字节数，多出的消息将通过引用传递，但是会消耗更多的内存(struct iovec). <br><em>Type: integer</em></td></tr><tr><td>receive.message.max.bytes</td><td>*</td><td>1000 .. 1000000000</td><td>100000000</td><td>kafka消息接收最大字节数，这事一种安全机制，防止在最坏的情况耗尽内存问题。建议值：fetch.message.max.bytes <em> 分区数 + 消息的最大字节数.<br></em>Type: integer*</td></tr><tr><td>max.in.flight.requests.per.connection</td><td>*</td><td>1 .. 1000000</td><td>1000000</td><td>broker连接数最大值，针对每个broker配置。主要用于发送消息，但是其他机制将会限制每个broker未处理消息消费数量为1个. <br><em>Type: integer</em></td></tr><tr><td>max.in.flight</td><td>*</td><td></td><td></td><td>参考 max.in.flight.requests.per.connection</td></tr><tr><td>metadata.request.timeout.ms</td><td>*</td><td>10 .. 900000</td><td>60000</td><td>没有数据操作的超时时间，单位毫秒. <br><em>Type: integer</em></td></tr><tr><td>topic.metadata.refresh.interval.ms</td><td>*</td><td>-1 .. 3600000</td><td>300000</td><td>数据刷新时间间隔，单位毫秒，自动刷新错误和连接，设置为-1则关闭刷新时间间隔. <br><em>Type: integer</em></td></tr><tr><td>metadata.max.age.ms</td><td>*</td><td>1 .. 86400000</td><td>-1</td><td>元数据缓存最大生命周期. 默认值为数据刷新时间间隔 metadata.refresh.interval.ms <em> 3 <br></em>Type: integer*</td></tr><tr><td>topic.metadata.refresh.fast.interval.ms</td><td>*</td><td>1 .. 60000</td><td>250</td><td>topic主题失去leader领导者时，元数据请求发送间隔. 用户快速恢复broker leader. <br><em>Type: integer</em></td></tr><tr><td>topic.metadata.refresh.fast.cnt</td><td>*</td><td>0 .. 1000</td><td>10</td><td>保留，未启用. <em> <br></em>Type: integer*</td></tr><tr><td>topic.metadata.refresh.sparse</td><td>*</td><td>true, false</td><td>true</td><td>极少的元数据请求，消费者的网络带宽很小 <br><em>Type: boolean</em></td></tr><tr><td>topic.blacklist</td><td>*</td><td></td><td></td><td>topic内名单，逗号分割增则表达式列表. <br><em>Type: pattern list</em></td></tr><tr><td>debug</td><td>*</td><td>generic, broker, topic, metadata, feature, queue, msg, protocol, cgrp, security, fetch, interceptor, plugin, consumer, all</td><td></td><td>一个逗号分割的调试上下文列表，包括：生产者：broker、topic、message； 消费者：cgroup、topic、tetch等 <br><em>Type: CSV flags</em></td></tr><tr><td>socket.timeout.ms</td><td>*</td><td>10 .. 300000</td><td>60000</td><td>默认的网络请求超时时间, Producer：ProduceRequests将使用批处理中第一条消息的socket.timeout.ms和其余message.timeout.ms的较小值。 使用者：FetchRequests将使用fetch.wait.max.ms + socket.timeout.ms.  <br><em>Type: integer</em></td></tr><tr><td>socket.blocking.max.ms</td><td>*</td><td>1 .. 60000</td><td>1000</td><td>socket套接字可能阻塞的最大时间，比较小的值提高了响应速度，但是CPU负载比较大. 已废弃. <strong>Deprecated</strong> <br><em>Type: integer</em></td></tr><tr><td>socket.send.buffer.bytes</td><td>*</td><td>0 .. 100000000</td><td>0</td><td>broker端发送缓冲区大小，0则使用系统默认值. <br><em>Type: integer</em></td></tr><tr><td>socket.receive.buffer.bytes</td><td>*</td><td>0 .. 100000000</td><td>0</td><td>broker端接收缓冲区大小，0则使用系统默认值. <br><em>Type: integer</em></td></tr><tr><td>socket.keepalive.enable</td><td>*</td><td>true, false</td><td>false</td><td>启用TCP keep-alives (SO_KEEPALIVE) on broker sockets <br><em>Type: boolean</em></td></tr><tr><td>socket.nagle.disable</td><td>*</td><td>true, false</td><td>false</td><td>禁用nagle 算法TCP_NODELAY  <br><em>Type: boolean</em></td></tr><tr><td>socket.max.fails</td><td>*</td><td>0 .. 1000000</td><td>1</td><td>发送失败的最大次数，超过该次数后断开与broker的连接，0 禁用；注意：连接会自动重连. <br><em>Type: integer</em></td></tr><tr><td>broker.address.ttl</td><td>*</td><td>0 .. 86400000</td><td>1000</td><td>broker地址解析结果缓存值(毫秒). <br><em>Type: integer</em></td></tr><tr><td>broker.address.family</td><td>*</td><td>any, v4, v6</td><td>any</td><td>any  ipv4  ipv6 <br><em>Type: enum value</em></td></tr><tr><td>reconnect.backoff.jitter.ms</td><td>*</td><td>0 .. 3600000</td><td>500</td><td>通过该配置参数+-50%调整broker重连. <br><em>Type: integer</em></td></tr><tr><td>statistics.interval.ms</td><td>*</td><td>0 .. 86400000</td><td>0</td><td>librdkafka统计时间间隔，应用程序也应该通过注册回调函数来实现对统计指标的监控，0禁用，单位1000ms. <br><em>Type: integer</em></td></tr><tr><td>enabled_events</td><td>*</td><td>0 .. 2147483647</td><td>0</td><td>See rd_kafka_conf_set_events() <br><em>Type: integer</em></td></tr><tr><td>error_cb</td><td>*</td><td></td><td></td><td>发送错误的回调函数， (set with rd_kafka_conf_set_error_cb()) <br><em>Type: pointer</em></td></tr><tr><td>throttle_cb</td><td>*</td><td></td><td></td><td>调整回调函数 (set with rd_kafka_conf_set_throttle_cb()) <br><em>Type: pointer</em></td></tr><tr><td>stats_cb</td><td>*</td><td></td><td></td><td>统计回调函数 (set with rd_kafka_conf_set_stats_cb()) <br><em>Type: pointer</em></td></tr><tr><td>log_cb</td><td>*</td><td></td><td></td><td>日志回调函数 (set with rd_kafka_conf_set_log_cb()) <br><em>Type: pointer</em></td></tr><tr><td>log_level</td><td>*</td><td>0 .. 7</td><td>6</td><td>日志级别 (syslog(3) levels) <br><em>Type: integer</em></td></tr><tr><td>log.queue</td><td>*</td><td>true, false</td><td>false</td><td>禁用内部librdkafka线程中的自发log_cb，而是使用rd_kafka_set_log_queue（）将队列中的日志消息排入队列，并通过标准轮询API提供日志回调或事件。 <strong>注意</strong>：日志消息将一直存在于临时队列中，直到日志队列被设置. <br><em>Type: boolean</em></td></tr><tr><td>log.thread.name</td><td>*</td><td>true, false</td><td>true</td><td>在日志中记录线程名称，经常用于调试librdkafka内部问题 <br><em>Type: boolean</em></td></tr><tr><td>log.connection.close</td><td>*</td><td>true, false</td><td>true</td><td>记录broker关闭事件，受0.9版本的connection.max.idle.ms参数影响，一般建议关闭该参数. <br><em>Type: boolean</em></td></tr><tr><td>socket_cb</td><td>*</td><td></td><td></td><td>为socket套接字创建CLOEXEC提供回调函数 <br><em>Type: pointer</em></td></tr><tr><td>connect_cb</td><td>*</td><td></td><td></td><td>socket连接的回调函数 <br><em>Type: pointer</em></td></tr><tr><td>closesocket_cb</td><td>*</td><td></td><td></td><td>socket关闭的回调函数 <br><em>Type: pointer</em></td></tr><tr><td>open_cb</td><td>*</td><td></td><td></td><td>打开文件时CLOEXEC的回调函数 <br><em>Type: pointer</em></td></tr><tr><td>opaque</td><td>*</td><td></td><td></td><td>应用程序设置的上下文参数，一般用与消息发送后的回调、librdkafka注册函数回调的上下文，主要用于参数传递，由c++到c在转会c++指针寻址上 (set with rd_kafka_conf_set_opaque()) <br><em>Type: pointer</em></td></tr><tr><td>default_topic_conf</td><td>*</td><td></td><td></td><td>自动订阅主题的默认配置参数 <br><em>Type: pointer</em></td></tr><tr><td>internal.termination.signal</td><td>*</td><td>0 .. 128</td><td>0</td><td>370/5000librdkafka将用于快速终止rd_kafka_destroy（）的信号。 如果未设置此信号，则会在rd_kafka_wait_destroyed（）返回true之前发生延迟，因为内部线程正在超时执行其系统调用。 如果这个信号被设置，但延迟将是最小的。 应用程序应该在安装内部信号处理程序时屏蔽此信号。 <br><em>Type: integer</em></td></tr><tr><td>api.version.request</td><td>*</td><td>true, false</td><td>true</td><td>请求broker支持的API版本以调整可用协议功能的功能。 如果设置为false，或者ApiVersionRequest失败，则将使用备用版本broker.version.fallback。 <strong>注意</strong>：取决于broker版本&gt; = 0.10.0。 如果（较旧的）代理不支持请求，则使用broker.version.fallback回退. <br><em>Type: boolean</em></td></tr><tr><td>api.version.request.timeout.ms</td><td>*</td><td>1 .. 300000</td><td>10000</td><td>broker的api版本请求超时时间. <br><em>Type: integer</em></td></tr><tr><td>api.version.fallback.ms</td><td>*</td><td>0 .. 604800000</td><td>1200000</td><td>Dictates how long the broker.version.fallback fallback is used in the case the ApiVersionRequest fails. <strong>NOTE</strong>: The ApiVersionRequest is only issued when a new connection to the broker is made (such as after an upgrade). <br><em>Type: integer</em></td></tr><tr><td>broker.version.fallback</td><td>*</td><td></td><td>0.9.0</td><td>Older broker versions (&lt;0.10.0) provides no way for a client to query for supported protocol features (ApiVersionRequest, see api.version.request) making it impossible for the client to know what features it may use. As a workaround a user may set this property to the expected broker version and the client will automatically adjust its feature set accordingly if the ApiVersionRequest fails (or is disabled). The fallback broker version will be used for api.version.fallback.ms. Valid values are: 0.9.0, 0.8.2, 0.8.1, 0.8.0. Any other value, such as 0.10.2.1, enables ApiVersionRequests. <br><em>Type: string</em></td></tr><tr><td>security.protocol</td><td>*</td><td>plaintext, ssl, sasl_plaintext, sasl_ssl</td><td>plaintext</td><td>用于和broker通信的协议，默认plaintext. <br><em>Type: enum value</em></td></tr><tr><td>ssl.cipher.suites</td><td>*</td><td></td><td></td><td>根据SSL/TLS规范,客户端提交使用的加密算法. See manual page for ciphers(1) and SSL_CTX_set_cipher_list(3). <br><em>Type: string</em></td></tr><tr><td>ssl.key.location</td><td>*</td><td></td><td></td><td>客户端私钥的路径. <br><em>Type: string</em></td></tr><tr><td>ssl.key.password</td><td>*</td><td></td><td></td><td>私钥密码 <br><em>Type: string</em></td></tr><tr><td>ssl.certificate.location</td><td>*</td><td></td><td></td><td>公钥地址. <br><em>Type: string</em></td></tr><tr><td>ssl.ca.location</td><td>*</td><td></td><td></td><td>CA证书路径. <br><em>Type: string</em></td></tr><tr><td>ssl.crl.location</td><td>*</td><td></td><td></td><td>CRL 路径，用于 broker 的证书校验. <br><em>Type: string</em></td></tr><tr><td>ssl.keystore.location</td><td>*</td><td></td><td></td><td>keystore存储路径. <br><em>Type: string</em></td></tr><tr><td>ssl.keystore.password</td><td>*</td><td></td><td></td><td>keystore 密码. <br><em>Type: string</em></td></tr><tr><td>sasl.mechanisms</td><td>*</td><td></td><td>GSSAPI</td><td>使用 SASL 机制鉴权。 支持：GSSAPI, PLAIN. 提示: 只能配置一种机制名. <br><em>Type: string</em></td></tr><tr><td>sasl.mechanism</td><td>*</td><td></td><td></td><td>Alias for sasl.mechanisms</td></tr><tr><td>sasl.kerberos.service.name</td><td>*</td><td></td><td>kafka</td><td>Kafka 运行的 Kerberos 首要名, not including /hostname@REALM <br><em>Type: string</em></td></tr><tr><td>sasl.kerberos.principal</td><td>*</td><td></td><td>kafkaclient</td><td>客户端的 Kerberos 首要名. (Not supported on Windows, will use the logon user’s principal). <br><em>Type: string</em></td></tr><tr><td>sasl.kerberos.kinit.cmd</td><td>*</td><td></td><td></td><td>完整的 kerberos kinit 命令串，%{config.prop.name} 替换为与配置对象一直的值，%{broker.name} broker 的主机名. <br><em>Type: string</em></td></tr><tr><td>sasl.kerberos.keytab</td><td>*</td><td></td><td></td><td>Kerberos keytab 文件的路径。如果不设置，则使用系统默认的。提示：不会自动使用，必须在 sasl.kerberos.kinit.cmd 中添加到模板  … -t %{sasl.kerberos.keytab}. <br><em>Type: string</em></td></tr><tr><td>sasl.kerberos.min.time.before.relogin</td><td>*</td><td>1 .. 86400000</td><td>60000</td><td>Key 恢复尝试的最小时间，毫秒. <br><em>Type: integer</em></td></tr><tr><td>sasl.username</td><td>*</td><td></td><td></td><td>使用 PLAIN 机制时，SASL 用户名 <br><em>Type: string</em></td></tr><tr><td>sasl.password</td><td>*</td><td></td><td></td><td>使用 PLAIN 机制时，SASL 密码 <br><em>Type: string</em></td></tr><tr><td>plugin.library.paths</td><td>*</td><td></td><td></td><td>使用;分割的插件库列表，如果没有标明库文件后缀，则根据平台自动配置dll或者so后缀名. <br><em>Type: string</em></td></tr><tr><td>interceptors</td><td>*</td><td></td><td></td><td>通过rd_kafka_conf_interceptoes添加拦截器. <br><em>Type: </em></td></tr><tr><td>group.id</td><td>*</td><td></td><td></td><td>客户端分组编号id <br><em>Type: string</em></td></tr><tr><td>partition.assignment.strategy</td><td>*</td><td></td><td>range,roundrobin</td><td>分区策略名称（轮询、范围）. <br><em>Type: string</em></td></tr><tr><td>session.timeout.ms</td><td>*</td><td>1 .. 3600000</td><td>30000</td><td>客户端会话超时时间. <br><em>Type: integer</em></td></tr><tr><td>heartbeat.interval.ms</td><td>*</td><td>1 .. 3600000</td><td>1000</td><td>组会话超时时间. <br><em>Type: integer</em></td></tr><tr><td>group.protocol.type</td><td>*</td><td></td><td>consumer</td><td>组协议类型 <br><em>Type: string</em></td></tr><tr><td>coordinator.query.interval.ms</td><td>*</td><td>1 .. 3600000</td><td>600000</td><td>多久查询一次当前的客户端组协调器。 如果当前分配的协调器已关闭，则在协调器重新分配的情况下，配置的查询时间间隔将除以10以更快地恢复. <br><em>Type: integer</em></td></tr><tr><td>enable.auto.commit</td><td>C</td><td>true, false</td><td>true</td><td>在后台周期性的自动提交偏移量. Note: setting this to false does not prevent the consumer from fetching previously committed start offsets. To circumvent this behaviour set specific start offsets per partition in the call to assign(). <br><em>Type: boolean</em></td></tr><tr><td>auto.commit.interval.ms</td><td>C</td><td>0 .. 86400000</td><td>5000</td><td>消费者偏移量提交（写入）到存储的频率，毫秒。(0 = 不可用) . (0 = disable). This setting is used by the high-level consumer. <br><em>Type: integer</em></td></tr><tr><td>enable.auto.offset.store</td><td>C</td><td>true, false</td><td>true</td><td>Automatically store offset of last message provided to application. <br><em>Type: boolean</em></td></tr><tr><td>queued.min.messages</td><td>C</td><td>1 .. 10000000</td><td>100000</td><td>Minimum number of messages per topic+partition librdkafka tries to maintain in the local consumer queue. <br><em>Type: integer</em></td></tr><tr><td>queued.max.messages.kbytes</td><td>C</td><td>1 .. 2097151</td><td>1048576</td><td>Maximum number of kilobytes per topic+partition in the local consumer queue. This value may be overshot by fetch.message.max.bytes. This property has higher priority than queued.min.messages. <br><em>Type: integer</em></td></tr><tr><td>fetch.wait.max.ms</td><td>C</td><td>0 .. 300000</td><td>100</td><td>Maximum time the broker may wait to fill the response with fetch.min.bytes. <br><em>Type: integer</em></td></tr><tr><td>fetch.message.max.bytes</td><td>C</td><td>1 .. 1000000000</td><td>1048576</td><td>Initial maximum number of bytes per topic+partition to request when fetching messages from the broker. If the client encounters a message larger than this value it will gradually try to increase it until the entire message can be fetched. <br><em>Type: integer</em></td></tr><tr><td>max.partition.fetch.bytes</td><td>C</td><td></td><td></td><td>Alias for fetch.message.max.bytes</td></tr><tr><td>fetch.min.bytes</td><td>C</td><td>1 .. 100000000</td><td>1</td><td>Minimum number of bytes the broker responds with. If fetch.wait.max.ms expires the accumulated data will be sent to the client regardless of this setting. <br><em>Type: integer</em></td></tr><tr><td>fetch.error.backoff.ms</td><td>C</td><td>0 .. 300000</td><td>500</td><td>How long to postpone the next fetch request for a topic+partition in case of a fetch error. <br><em>Type: integer</em></td></tr><tr><td>offset.store.method</td><td>C</td><td>none, file, broker</td><td>broker</td><td>Offset commit store method: ‘file’ - local file store (offset.store.path, et.al), ‘broker’ - broker commit store (requires Apache Kafka 0.8.2 or later on the broker). <br><em>Type: enum value</em></td></tr><tr><td>consume_cb</td><td>C</td><td></td><td></td><td>Message consume callback (set with rd_kafka_conf_set_consume_cb()) <br><em>Type: pointer</em></td></tr><tr><td>rebalance_cb</td><td>C</td><td></td><td></td><td>Called after consumer group has been rebalanced (set with rd_kafka_conf_set_rebalance_cb()) <br><em>Type: pointer</em></td></tr><tr><td>offset_commit_cb</td><td>C</td><td></td><td></td><td>Offset commit result propagation callback. (set with rd_kafka_conf_set_offset_commit_cb()) <br><em>Type: pointer</em></td></tr><tr><td>enable.partition.eof</td><td>C</td><td>true, false</td><td>true</td><td>Emit RD_KAFKA_RESP_ERR__PARTITION_EOF event whenever the consumer reaches the end of a partition. <br><em>Type: boolean</em></td></tr><tr><td>check.crcs</td><td>C</td><td>true, false</td><td>false</td><td>Verify CRC32 of consumed messages, ensuring no on-the-wire or on-disk corruption to the messages occurred. This check comes at slightly increased CPU usage. <br><em>Type: boolean</em></td></tr><tr><td>queue.buffering.max.messages</td><td>P</td><td>1 .. 10000000</td><td>100000</td><td>Maximum number of messages allowed on the producer queue. <br><em>Type: integer</em></td></tr><tr><td>queue.buffering.max.kbytes</td><td>P</td><td>1 .. 2097151</td><td>1048576</td><td>Maximum total message size sum allowed on the producer queue. This property has higher priority than queue.buffering.max.messages. <br><em>Type: integer</em></td></tr><tr><td>queue.buffering.max.ms</td><td>P</td><td>0 .. 900000</td><td>0</td><td>Delay in milliseconds to wait for messages in the producer queue to accumulate before constructing message batches (MessageSets) to transmit to brokers. A higher value allows larger and more effective (less overhead, improved compression) batches of messages to accumulate at the expense of increased message delivery latency. <br><em>Type: integer</em></td></tr><tr><td>linger.ms</td><td>P</td><td></td><td></td><td>Alias for queue.buffering.max.ms</td></tr><tr><td>message.send.max.retries</td><td>P</td><td>0 .. 10000000</td><td>2</td><td>How many times to retry sending a failing MessageSet. <strong>Note:</strong> retrying may cause reordering. <br><em>Type: integer</em></td></tr><tr><td>retries</td><td>P</td><td></td><td></td><td>Alias for message.send.max.retries</td></tr><tr><td>retry.backoff.ms</td><td>P</td><td>1 .. 300000</td><td>100</td><td>The backoff time in milliseconds before retrying a protocol request. <br><em>Type: integer</em></td></tr><tr><td>queue.buffering.backpressure.threshold</td><td>P</td><td>0 .. 1000000</td><td>10</td><td>The threshold of outstanding not yet transmitted requests needed to backpressure the producer’s message accumulator. A lower number yields larger and more effective batches. <br><em>Type: integer</em></td></tr><tr><td>compression.codec</td><td>P</td><td>none, gzip, snappy, lz4</td><td>none</td><td>compression codec to use for compressing message sets. This is the default value for all topics, may be overriden by the topic configuration property compression.codec.  <br><em>Type: enum value</em></td></tr><tr><td>compression.type</td><td>P</td><td></td><td></td><td>Alias for compression.codec</td></tr><tr><td>batch.num.messages</td><td>P</td><td>1 .. 1000000</td><td>10000</td><td>Maximum number of messages batched in one MessageSet. The total MessageSet size is also limited by message.max.bytes. <br><em>Type: integer</em></td></tr><tr><td>delivery.report.only.error</td><td>P</td><td>true, false</td><td>false</td><td>Only provide delivery reports for failed messages. <br><em>Type: boolean</em></td></tr><tr><td>dr_cb</td><td>P</td><td></td><td></td><td>Delivery report callback (set with rd_kafka_conf_set_dr_cb()) <br><em>Type: pointer</em></td></tr><tr><td>dr_msg_cb</td><td>P</td><td></td><td></td><td>Delivery report callback (set with rd_kafka_conf_set_dr_msg_cb()) <br><em>Type: pointer</em></td></tr></tbody></table><h2 id="Topic-configuration-properties"><a href="#Topic-configuration-properties" class="headerlink" title="Topic configuration properties"></a>Topic configuration properties</h2><table><thead><tr><th>Property</th><th>C/P</th><th>Range</th><th>Default</th><th>Description              </th></tr></thead><tbody><tr><td>request.required.acks</td><td>P</td><td>-1 .. 1000</td><td>1</td><td>This field indicates how many acknowledgements the leader broker must receive from ISR brokers before responding to the request: <em>0</em>=Broker does not send any response/ack to client, <em>1</em>=Only the leader broker will need to ack the message, <em>-1</em> or <em>all</em>=broker will block until message is committed by all in sync replicas (ISRs) or broker’s min.insync.replicas setting before sending response.  <br><em>Type: integer</em></td></tr><tr><td>acks</td><td>P</td><td></td><td></td><td>Alias for request.required.acks</td></tr><tr><td>request.timeout.ms</td><td>P</td><td>1 .. 900000</td><td>5000</td><td>The ack timeout of the producer request in milliseconds. This value is only enforced by the broker and relies on request.required.acks being != 0. <br><em>Type: integer</em></td></tr><tr><td>message.timeout.ms</td><td>P</td><td>0 .. 900000</td><td>300000</td><td>Local message timeout. This value is only enforced locally and limits the time a produced message waits for successful delivery. A time of 0 is infinite. <br><em>Type: integer</em></td></tr><tr><td>queuing.strategy</td><td>P</td><td>fifo, lifo</td><td>fifo</td><td>Producer queuing strategy. FIFO preserves produce ordering, while LIFO prioritizes new messages. WARNING: lifo is experimental and subject to change or removal. <br><em>Type: enum value</em></td></tr><tr><td>produce.offset.report</td><td>P</td><td>true, false</td><td>false</td><td>Report offset of produced message back to application. The application must be use the dr_msg_cb to retrieve the offset from rd_kafka_message_t.offset. <br><em>Type: boolean</em></td></tr><tr><td>partitioner</td><td>P</td><td></td><td>consistent_random</td><td>Partitioner: random - random distribution, consistent - CRC32 hash of key (Empty and NULL keys are mapped to single partition), consistent_random - CRC32 hash of key (Empty and NULL keys are randomly partitioned), murmur2 - Java Producer compatible Murmur2 hash of key (NULL keys are mapped to single partition), murmur2_random - Java Producer compatible Murmur2 hash of key (NULL keys are randomly partitioned. This is functionally equivalent to the default partitioner in the Java Producer.). <br><em>Type: string</em></td></tr><tr><td>partitioner_cb</td><td>P</td><td></td><td></td><td>Custom partitioner callback (set with rd_kafka_topic_conf_set_partitioner_cb()) <br><em>Type: pointer</em></td></tr><tr><td>msg_order_cmp</td><td>P</td><td></td><td></td><td>Message queue ordering comparator (set with rd_kafka_topic_conf_set_msg_order_cmp()). Also see queuing.strategy. <br><em>Type: pointer</em></td></tr><tr><td>opaque</td><td>*</td><td></td><td></td><td>Application opaque (set with rd_kafka_topic_conf_set_opaque()) <br><em>Type: pointer</em></td></tr><tr><td>compression.codec</td><td>P</td><td>none, gzip, snappy, lz4, inherit</td><td>inherit</td><td>Compression codec to use for compressing message sets. inherit = inherit global compression.codec configuration. <br><em>Type: enum value</em></td></tr><tr><td>compression.type</td><td>P</td><td></td><td></td><td>Alias for compression.codec</td></tr><tr><td>auto.commit.enable</td><td>C</td><td>true, false</td><td>true</td><td>If true, periodically commit offset of the last message handed to the application. This committed offset will be used when the process restarts to pick up where it left off. If false, the application will have to call rd_kafka_offset_store() to store an offset (optional). <strong>NOTE:</strong> This property should only be used with the simple legacy consumer, when using the high-level KafkaConsumer the global enable.auto.commit property must be used instead. <strong>NOTE:</strong> There is currently no zookeeper integration, offsets will be written to broker or local file according to offset.store.method. <br><em>Type: boolean</em></td></tr><tr><td>enable.auto.commit</td><td>C</td><td></td><td></td><td>Alias for auto.commit.enable</td></tr><tr><td>auto.commit.interval.ms</td><td>C</td><td>10 .. 86400000</td><td>60000</td><td>The frequency in milliseconds that the consumer offsets are committed (written) to offset storage. This setting is used by the low-level legacy consumer. <br><em>Type: integer</em></td></tr><tr><td>auto.offset.reset</td><td>C</td><td>smallest, earliest, beginning, largest, latest, end, error</td><td>largest</td><td>Action to take when there is no initial offset in offset store or the desired offset is out of range: ‘smallest’,’earliest’ - automatically reset the offset to the smallest offset, ‘largest’,’latest’ - automatically reset the offset to the largest offset, ‘error’ - trigger an error which is retrieved by consuming messages and checking ‘message-&gt;err’. <br><em>Type: enum value</em></td></tr><tr><td>offset.store.path</td><td>C</td><td></td><td>.</td><td>Path to local file for storing offsets. If the path is a directory a filename will be automatically generated in that directory based on the topic and partition. <br><em>Type: string</em></td></tr><tr><td>offset.store.sync.interval.ms</td><td>C</td><td>-1 .. 86400000</td><td>-1</td><td>fsync() interval for the offset file, in milliseconds. Use -1 to disable syncing, and 0 for immediate sync after each write. <br><em>Type: integer</em></td></tr><tr><td>offset.store.method</td><td>C</td><td>file, broker</td><td>broker</td><td>Offset commit store method: ‘file’ - local file store (offset.store.path, et.al), ‘broker’ - broker commit store (requires “group.id” to be configured and Apache Kafka 0.8.2 or later on the broker.). <br><em>Type: enum value</em></td></tr><tr><td>consume.callback.max.messages</td><td>C</td><td>0 .. 1000000</td><td>0</td><td>Maximum number of messages to dispatch in one rd_kafka_consume_callback<em>() call (0 = unlimited) <br></em>Type: integer*</td></tr></tbody></table><h3 id="C-P-legend-C-Consumer-P-Producer-both"><a href="#C-P-legend-C-Consumer-P-Producer-both" class="headerlink" title="C/P legend: C = Consumer, P = Producer, * = both"></a>C/P legend: C = Consumer, P = Producer, * = both</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;librdkafka配置参数整理。&lt;br&gt;
    
    </summary>
    
      <category term="后端" scheme="http://lehoon.cn/categories/backend/"/>
    
    
      <category term="kafka" scheme="http://lehoon.cn/tags/kafka/"/>
    
      <category term="配置" scheme="http://lehoon.cn/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>apk反编译工具</title>
    <link href="http://lehoon.cn/orther/2017/12/25/apk-decompile-tools.html"/>
    <id>http://lehoon.cn/orther/2017/12/25/apk-decompile-tools.html</id>
    <published>2017-12-25T03:30:49.000Z</published>
    <updated>2018-09-22T13:30:21.689Z</updated>
    
    <content type="html"><![CDATA[<p>Android APK反编译下载。<br><a id="more"></a></p><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><h3 id="资源文件获取工具"><a href="#资源文件获取工具" class="headerlink" title="资源文件获取工具"></a>资源文件获取工具</h3><p>apktool，主要是apk的资源文件提取，可以提取到图片文件和布局文件。<br>版本：2.3.0<br>下载地址：<a href="http://static.lehoon.cn//download/tools/apktool_2.3.0.jar" target="_blank" rel="noopener">apktool_2.3.0</a></p><h3 id="资源文件获取工具-1"><a href="#资源文件获取工具-1" class="headerlink" title="资源文件获取工具"></a>资源文件获取工具</h3><p>dex-tools，将apk反编译成java源码，apk的资源文件classses.dex转成jar为文件。<br>版本：2.1<br>下载地址：<a href="http://static.lehoon.cn//download/tools/dex-tools-2.1.zip" target="_blank" rel="noopener">dex-tools-2.1</a></p><h3 id="阅读class文件工具"><a href="#阅读class文件工具" class="headerlink" title="阅读class文件工具"></a>阅读class文件工具</h3><p>jd-gui，主要是读取class文件，及载入class相关的工程文件的工具，可以浏览相关的java源码及关联文件代码<br>版本：1.4.0<br>下载地址：<a href="http://static.lehoon.cn//download/tools/jd-gui-windows-1.4.0.zip" target="_blank" rel="noopener">jd-gui-1.4.0</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android APK反编译下载。&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="http://lehoon.cn/categories/orther/"/>
    
    
      <category term="apk decompile" scheme="http://lehoon.cn/tags/apk-decompile/"/>
    
      <category term="反编译" scheme="http://lehoon.cn/tags/%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>地图精度与电子地图比例尺的关系</title>
    <link href="http://lehoon.cn/orther/2017/12/08/map-accuracy2scale.html"/>
    <id>http://lehoon.cn/orther/2017/12/08/map-accuracy2scale.html</id>
    <published>2017-12-08T06:16:24.000Z</published>
    <updated>2018-09-22T13:30:58.127Z</updated>
    
    <content type="html"><![CDATA[<p>地图精度与比例尺的关系.<br><a id="more"></a></p><h2 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h2><p>1、地图最大精度<br>视力正常的人的肉眼能分辨图上最短距离是0.1毫米。所以地图上0.1毫秒所能表现的实地水平长度就是地图上所能表示的最高精度，成为比例尺的最大精度。</p><p>2、地图比例尺<br>图上距离和实地距离的比例。</p><p>3、电子地图比例尺<br>电子地图一般是矢量地图，它具有无极缩放的特性，而通常说它的比例尺只是一种借用，即指生成电子地图的传统地图图源的比例尺。</p><h2 id="基本的比例尺与地图精度的关系"><a href="#基本的比例尺与地图精度的关系" class="headerlink" title="基本的比例尺与地图精度的关系"></a>基本的比例尺与地图精度的关系</h2><table><thead><tr><th style="text-align:left">比例尺</th><th style="text-align:left">1:1万</th><th style="text-align:left">1:2.5万</th><th style="text-align:left">1:5万</th><th style="text-align:left">1:10万</th><th style="text-align:left">1:25万</th><th style="text-align:left">1:50万</th><th style="text-align:left">1:100万</th></tr></thead><tbody><tr><td style="text-align:left">最大精度(m)</td><td style="text-align:left">1</td><td style="text-align:left">2.5</td><td style="text-align:left">5</td><td style="text-align:left">10</td><td style="text-align:left">25</td><td style="text-align:left">50</td><td style="text-align:left">100</td></tr></tbody></table><p>计算方式：<br>计算1cm能表达的距离，然后除以100即可算出电子地图的最大精度。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;地图精度与比例尺的关系.&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="http://lehoon.cn/categories/orther/"/>
    
    
      <category term="map" scheme="http://lehoon.cn/tags/map/"/>
    
      <category term="accuracy" scheme="http://lehoon.cn/tags/accuracy/"/>
    
      <category term="scale" scheme="http://lehoon.cn/tags/scale/"/>
    
  </entry>
  
  <entry>
    <title>window系统大文件打开工具</title>
    <link href="http://lehoon.cn/orther/2017/12/08/window-big-file-tools.html"/>
    <id>http://lehoon.cn/orther/2017/12/08/window-big-file-tools.html</id>
    <published>2017-12-08T01:34:26.000Z</published>
    <updated>2018-09-22T13:31:23.465Z</updated>
    
    <content type="html"><![CDATA[<p>window系统上打开大文件的工具集。<br><a id="more"></a></p><h2 id="EmEditor"><a href="#EmEditor" class="headerlink" title="EmEditor"></a>EmEditor</h2><p>网址：<a href="https://zh-cn.emeditor.com/" target="_blank" rel="noopener">https://zh-cn.emeditor.com/</a></p><h2 id="LogView"><a href="#LogView" class="headerlink" title="LogView"></a>LogView</h2><p>网址：<a href="http://www.logview.info" target="_blank" rel="noopener">http://www.logview.info</a></p><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p>网址：<a href="http://www.vim.org/download.php#pc" target="_blank" rel="noopener">http://www.vim.org/download.php#pc</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;window系统上打开大文件的工具集。&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="http://lehoon.cn/categories/orther/"/>
    
    
      <category term="window" scheme="http://lehoon.cn/tags/window/"/>
    
      <category term="big file" scheme="http://lehoon.cn/tags/big-file/"/>
    
      <category term="tools" scheme="http://lehoon.cn/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>GPRMC格式详解</title>
    <link href="http://lehoon.cn/orther/2017/10/27/gnss-gprmc-format.html"/>
    <id>http://lehoon.cn/orther/2017/10/27/gnss-gprmc-format.html</id>
    <published>2017-10-27T07:40:39.000Z</published>
    <updated>2018-09-22T13:30:34.775Z</updated>
    
    <content type="html"><![CDATA[<p>Recommended Minimum Specific GPS/TRANSIT Data（RMC）推荐定位信息<br><a id="more"></a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$GPRMC,&lt;<span class="number">1</span>&gt;,&lt;<span class="number">2</span>&gt;,&lt;<span class="number">3</span>&gt;,&lt;<span class="number">4</span>&gt;,&lt;<span class="number">5</span>&gt;,&lt;<span class="number">6</span>&gt;,&lt;<span class="number">7</span>&gt;,&lt;<span class="number">8</span>&gt;,&lt;<span class="number">9</span>&gt;,&lt;<span class="number">10</span>&gt;,&lt;<span class="number">11</span>&gt;,&lt;<span class="number">12</span>&gt;*hh&lt;CR&gt;&lt;LF&gt;</span><br><span class="line">&lt;<span class="number">1</span>&gt; UTC时间，hhmmss（时分秒）格式</span><br><span class="line">&lt;<span class="number">2</span>&gt; 定位状态，A=有效定位，V=无效定位</span><br><span class="line">&lt;<span class="number">3</span>&gt; 纬度ddmm.mmmm（度分）格式（前面的<span class="number">0</span>也将被传输）</span><br><span class="line">&lt;<span class="number">4</span>&gt; 纬度半球N（北半球）或S（南半球）</span><br><span class="line">&lt;<span class="number">5</span>&gt; 经度dddmm.mmmm（度分）格式（前面的<span class="number">0</span>也将被传输）</span><br><span class="line">&lt;<span class="number">6</span>&gt; 经度半球E（东经）或W（西经）</span><br><span class="line">&lt;<span class="number">7</span>&gt; 地面速率（<span class="number">000.0</span>~<span class="number">999.9</span>节，前面的<span class="number">0</span>也将被传输）    这里是按照节计算的，换成成千米/时为<span class="number">1.852</span>km/h</span><br><span class="line">&lt;<span class="number">8</span>&gt; 地面航向（<span class="number">000.0</span>~<span class="number">359.9</span>度，以真北为参考基准，前面的<span class="number">0</span>也将被传输）</span><br><span class="line">&lt;<span class="number">9</span>&gt; UTC日期，ddmmyy（日月年）格式</span><br><span class="line">&lt;<span class="number">10</span>&gt; 磁偏角（<span class="number">000.0</span>~<span class="number">180.0</span>度，前面的<span class="number">0</span>也将被传输）</span><br><span class="line">&lt;<span class="number">11</span>&gt; 磁偏角方向，E（东）或W（西）</span><br><span class="line">&lt;<span class="number">12</span>&gt; 模式指示（仅NMEA0183 <span class="number">3.00</span>版本输出，A=自主定位，D=差分，E=估算，N=数据无效）</span><br></pre></td></tr></table></figure><h2 id="数据样例"><a href="#数据样例" class="headerlink" title="数据样例"></a>数据样例</h2><p>源数据<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$GNRMC,<span class="number">034404.00</span>,A,<span class="number">3640.48056</span>,N,<span class="number">11707.96443</span>,E,<span class="number">0.04</span>,<span class="number">0.000</span>,<span class="number">271017</span>,<span class="number">0.0</span>,<span class="number">0</span>,D*<span class="number">68</span></span><br><span class="line">解析后的数据</span><br><span class="line">$GNRMC                 消息头标识（rmc是固定的）</span><br><span class="line"><span class="number">034404.00</span>              UTC时间</span><br><span class="line">A                      有效定位</span><br><span class="line"><span class="number">3640.48056</span>             纬度</span><br><span class="line">N                      纬度方向</span><br><span class="line"><span class="number">11707.96443</span>            经度</span><br><span class="line">E                      纬度方向</span><br><span class="line"><span class="number">0.04</span>                   地面速率  * <span class="number">1852</span>米/h</span><br><span class="line"><span class="number">0.000</span>                  地面航向</span><br><span class="line"><span class="number">271017</span>                 UTC日期(ddmmyy)</span><br><span class="line"><span class="number">0.0</span>                    磁偏角</span><br><span class="line"><span class="number">0</span>                      磁偏角方向</span><br><span class="line">D                      模式指示</span><br><span class="line">*<span class="number">46</span>                    CRC</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure></p><p>节/h = 1.852km/h</p><p>速度计算方式为：速度*1852为m/h</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recommended Minimum Specific GPS/TRANSIT Data（RMC）推荐定位信息&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="http://lehoon.cn/categories/orther/"/>
    
    
      <category term="gnss" scheme="http://lehoon.cn/tags/gnss/"/>
    
      <category term="format" scheme="http://lehoon.cn/tags/format/"/>
    
      <category term="gprmc" scheme="http://lehoon.cn/tags/gprmc/"/>
    
  </entry>
  
  <entry>
    <title>通过gulp自动构建项目静态资源的版本号</title>
    <link href="http://lehoon.cn/frontend/2017/09/21/autobuild-static-version.html"/>
    <id>http://lehoon.cn/frontend/2017/09/21/autobuild-static-version.html</id>
    <published>2017-09-21T02:10:01.000Z</published>
    <updated>2018-09-22T13:30:21.861Z</updated>
    
    <content type="html"><![CDATA[<p>通过gulp自动构建项目前端静态资源的版本号，解决浏览器缓存导致更新不及时的问题。<br><a id="more"></a></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>项目上线后，正常的改动升级不可避免，后端的改动还好说。服务发布完成就行了，但是前端页面因为有浏览器缓存导致js、css、图片等资源不会立即更新，这就导致项目升级后，客户端看到的可能还是旧的资源。需要手动清理浏览器缓存后再刷新才能更新到最新版本。  这就需要通过资源文件版本号来实现客户端同步的问题。</p><p>例如：<br>html页面中的js引用如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/common/task.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>更改后的js引用如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/common/task.js?v=56365ee35d"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样如果浏览器发现src引用的有更改，则会重新从服务器端请求该文件，这样可以实现同步了。</p><p>如果只有一个html页面的话还好修改，但是一般现在的项目中html会有多个，js、css、图片也会有很多，所以手动管理就会变的很耗时间，这时候就需要一个自动化维护的手段来实现，现在nodejs很火，基于nodejs实现的gulp就是一个流式自动化构建工具。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>1、生成静态资源的文件hash码，保存到指定的文件。<br>2、如果文件发生变化，则文件的hash码也会跟着变化。<br>3、检查html文件中的js文件，如果文件的hash不变，则不替换，如果不同则替换。</p><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><h3 id="创建自动化构建的项目"><a href="#创建自动化构建的项目" class="headerlink" title="创建自动化构建的项目"></a>创建自动化构建的项目</h3><p>1、新建项目名称buildpro<br>2、在buildpro文件夹下，创建node_modules文件及项目文件。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">D:\home\lehoon\develop\buildpro&gt;npm instll module_name</span><br><span class="line">npm WARN saveError ENOENT: <span class="keyword">no</span> such <span class="keyword">file</span> <span class="built_in">or</span> directory, <span class="keyword">open</span> <span class="string">'D:\home\lehoon\develop\buildpro\package.json'</span></span><br><span class="line">npm notice created <span class="keyword">a</span> lockfile <span class="keyword">as</span> package-lock.json. You should commit this <span class="keyword">file</span>.</span><br><span class="line"></span><br><span class="line">npm WARN enoent ENOENT: <span class="keyword">no</span> such <span class="keyword">file</span> <span class="built_in">or</span> directory, <span class="keyword">open</span> <span class="string">'D:\home\lehoon\develop\buildpro\package.json'</span></span><br><span class="line">npm WARN buildpro No description</span><br><span class="line">npm WARN buildpro No repository field.</span><br><span class="line">npm WARN buildpro No README data</span><br><span class="line">npm WARN buildpro No license field.</span><br><span class="line"></span><br><span class="line">+ module_name@<span class="number">1.0</span>.<span class="number">0</span></span><br><span class="line">added <span class="number">43</span> packages in <span class="number">5.119</span>s</span><br><span class="line"></span><br><span class="line">D:\home\lehoon\develop\buildpro&gt;npm init</span><br><span class="line">This utility will walk you through creating <span class="keyword">a</span> package.json <span class="keyword">file</span>.</span><br><span class="line">It <span class="keyword">only</span> covers the most common <span class="built_in">items</span>, <span class="built_in">and</span> tries <span class="keyword">to</span> guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See `npm <span class="keyword">help</span> json` <span class="keyword">for</span> definitive documentation <span class="keyword">on</span> these fields</span><br><span class="line"><span class="built_in">and</span> exactly what they <span class="keyword">do</span>.</span><br><span class="line"></span><br><span class="line">Use `npm install <span class="symbol">&lt;pkg&gt;</span>` afterwards <span class="keyword">to</span> install <span class="keyword">a</span> package <span class="built_in">and</span></span><br><span class="line">save it <span class="keyword">as</span> <span class="keyword">a</span> dependency in the package.json <span class="keyword">file</span>.</span><br><span class="line"></span><br><span class="line">Press ^C at any time <span class="keyword">to</span> <span class="keyword">quit</span>.</span><br><span class="line">package name: (buildpro)</span><br><span class="line"><span class="keyword">version</span>: (<span class="number">1.0</span>.<span class="number">0</span>)</span><br><span class="line">description:</span><br><span class="line">entry poin<span class="variable">t:</span> (<span class="built_in">index</span>.js)</span><br><span class="line">test <span class="keyword">command</span>:</span><br><span class="line">git repository:</span><br><span class="line">keyword<span class="variable">s:</span></span><br><span class="line">author:</span><br><span class="line">license: (ISC)</span><br><span class="line">About <span class="keyword">to</span> <span class="keyword">write</span> <span class="keyword">to</span> D:\home\lehoon\develop\buildpro\package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"buildpro"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"module_name"</span>: <span class="string">"^1.0.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Is this ok? (yes) yes</span><br></pre></td></tr></table></figure></p><h3 id="安装gulp、配置gulp"><a href="#安装gulp、配置gulp" class="headerlink" title="安装gulp、配置gulp"></a>安装gulp、配置gulp</h3><p>1、安装gulp及插件<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp@<span class="number">3.9</span><span class="number">.1</span></span><br><span class="line">npm install --save-dev gulp-rev@<span class="number">7.1</span><span class="number">.2</span></span><br><span class="line">npm install --save-dev gulp-rev-collector@<span class="number">1.1</span><span class="number">.1</span></span><br><span class="line">npm install --save-dev run-sequence@<span class="number">1.2</span><span class="number">.2</span></span><br></pre></td></tr></table></figure></p><p>2、配置规则<br>修改node_modules\gulp_rev\index.js文件<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">把 manifest[<span class="keyword">originalFile] </span>= revisionedFile 修改成</span><br><span class="line">manifest[<span class="keyword">originalFile] </span>=<span class="keyword">originalFile </span>+ <span class="string">'?v='</span> +file.revHash<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>修改node_modules\gulp_rev_collector\index.js文件<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">把<span class="keyword">if</span> ( !_.isString(json[<span class="built_in">key</span>]) ||path.basename(json[<span class="built_in">key</span>]).replace(newRegExp( opts.revSuffix ),<span class="string">''</span> ) !== path.basename(<span class="built_in">key</span>) ) &#123;  </span><br><span class="line">修改成</span><br><span class="line"><span class="keyword">if</span> (!_.isString(json[<span class="built_in">key</span>]) ||path.basename(json[<span class="built_in">key</span>]).<span class="built_in">split</span>(<span class="string">'?'</span>)[<span class="number">0</span>] !== path.basename(<span class="built_in">key</span>)) &#123;  </span><br><span class="line"></span><br><span class="line">通过修改regexp: newRegExp(<span class="string">'([\/\\\\\'"])'</span> +pattern, <span class="string">'g'</span>),  修改成 regexp: <span class="keyword">new</span> RegExp( <span class="string">'([\/\\\\\'"])'</span> + pattern + <span class="string">'(\\?v=\\w&#123;10&#125;)?'</span>, <span class="string">'g'</span> ),</span><br></pre></td></tr></table></figure></p><h3 id="编写gulp任务文件"><a href="#编写gulp任务文件" class="headerlink" title="编写gulp任务文件"></a>编写gulp任务文件</h3><p>1、gulp默认找gulpfile.js执行，所以gulp的任务规则都放在项目根目录下的gulpfile.js中<br>2、gulp的规则文件如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> runSequence = <span class="built_in">require</span>(<span class="string">'run-sequence'</span>);</span><br><span class="line"><span class="keyword">var</span> rev = <span class="built_in">require</span>(<span class="string">'gulp-rev'</span>);</span><br><span class="line"><span class="keyword">var</span> revCollector = <span class="built_in">require</span>(<span class="string">'gulp-rev-collector'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//要处理的项目工程目录</span></span><br><span class="line"><span class="keyword">var</span> programPath = <span class="string">'D:/workspace/lshop'</span>;</span><br><span class="line"><span class="keyword">var</span> cssSrc=programPath + <span class="string">'/css/**/*.css'</span>;</span><br><span class="line"><span class="keyword">var</span> jsSrc=programPath + <span class="string">'/js/**/*.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//css文件生成hash编码，并保存到文件</span></span><br><span class="line">gulp.task(<span class="string">'revCss'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'========='</span> + cssSrc);</span><br><span class="line">    <span class="keyword">return</span> gulp.src(cssSrc)</span><br><span class="line">        .pipe(rev())</span><br><span class="line">        .pipe(rev.manifest())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'rev/css'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算js文件的hash码并保存到文件</span></span><br><span class="line">gulp.task(<span class="string">'revJs'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'========='</span> + jsSrc);</span><br><span class="line">    <span class="keyword">return</span> gulp.src(jsSrc)</span><br><span class="line">        .pipe(rev())</span><br><span class="line">        .pipe(rev.manifest())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'rev/js'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//替换html中的js版本号</span></span><br><span class="line">gulp.task(<span class="string">'revHtml'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'rev/**/*.json'</span>, programPath+<span class="string">'/*html'</span>])</span><br><span class="line">        .pipe(revCollector())</span><br><span class="line">        .pipe(gulp.dest(programPath));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'dev'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line">    condition = <span class="literal">false</span>;</span><br><span class="line">    runSequence([<span class="string">'revCss'</span>],[<span class="string">'revJs'</span>], [<span class="string">'revHtml'</span>], done);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'dev'</span>]);</span><br></pre></td></tr></table></figure></p><p>3、然后切换到控制台下运行gulp命令即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过gulp自动构建项目前端静态资源的版本号，解决浏览器缓存导致更新不及时的问题。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://lehoon.cn/categories/frontend/"/>
    
    
      <category term="gulp" scheme="http://lehoon.cn/tags/gulp/"/>
    
      <category term="静态资源" scheme="http://lehoon.cn/tags/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/"/>
    
      <category term="版本" scheme="http://lehoon.cn/tags/%E7%89%88%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Exception loading sessions from persistent storage</title>
    <link href="http://lehoon.cn/backend/2017/08/28/load-session-persistent-exception.html"/>
    <id>http://lehoon.cn/backend/2017/08/28/load-session-persistent-exception.html</id>
    <published>2017-08-28T02:34:36.000Z</published>
    <updated>2018-09-22T13:30:56.610Z</updated>
    
    <content type="html"><![CDATA[<p>启动项目时报以下异常,严重: Exception loading sessions from persistent storage.<br><a id="more"></a><br>遇到上述异常，删除Tomcat里面的work\Catalina\localhost下的项目文件内容即可解决.<br>原因是由于项目测试中class文件或者其它文件更新过频繁。</p><p>之前经常碰到页面修改后，重新发布的项目页面还是原样，不管删掉tomcat/webapps/发布的项目还是重新部署，都无法显示修改后的效果，<br>但是其他页面修改后又能显示。真是莫名其妙。<br>现在才知道是tomcat的问题，同样删除Tomcat里面的work\Catalina\localhost下的项目文件内容即可解决.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;启动项目时报以下异常,严重: Exception loading sessions from persistent storage.&lt;br&gt;
    
    </summary>
    
      <category term="后端" scheme="http://lehoon.cn/categories/backend/"/>
    
    
      <category term="java" scheme="http://lehoon.cn/tags/java/"/>
    
      <category term="tomcat" scheme="http://lehoon.cn/tags/tomcat/"/>
    
      <category term="session" scheme="http://lehoon.cn/tags/session/"/>
    
      <category term="exception" scheme="http://lehoon.cn/tags/exception/"/>
    
  </entry>
  
  <entry>
    <title>Mysql重设密码和远程访问</title>
    <link href="http://lehoon.cn/orther/2017/06/20/mysql-reset-password.html"/>
    <id>http://lehoon.cn/orther/2017/06/20/mysql-reset-password.html</id>
    <published>2017-06-20T07:05:52.000Z</published>
    <updated>2018-09-22T13:31:01.485Z</updated>
    
    <content type="html"><![CDATA[<p>mysql安装默认的root账户没有密码，所以登录mysql需要通过mysql -uroot -h 127.0.0.1 -P 3306登录后，设置密码。<br><a id="more"></a></p><h2 id="重设密码"><a href="#重设密码" class="headerlink" title="重设密码"></a>重设密码</h2><h3 id="登录mysql数据库"><a href="#登录mysql数据库" class="headerlink" title="登录mysql数据库"></a>登录mysql数据库</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -P <span class="number">3306</span></span><br></pre></td></tr></table></figure><h3 id="更新密码"><a href="#更新密码" class="headerlink" title="更新密码"></a>更新密码</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> <span class="keyword">password</span> = <span class="keyword">PASSWORD</span>(<span class="string">'123456'</span>) <span class="keyword">where</span> <span class="keyword">user</span> = <span class="string">'root'</span>;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br></pre></td></tr></table></figure><p>重新登录就需要输入密码了。</p><h2 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h2><p>mysql远程连接是通过mysql数据库中user表中的host主机字段来限定的，如果是%则匹配所有主机，如果是localhost、127.0.0.1或者是主机名的话，则表示只允许本机登录。一般线上服务器都是限制本机登录。</p><h3 id="直接该表字段"><a href="#直接该表字段" class="headerlink" title="直接该表字段"></a>直接该表字段</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update <span class="keyword">user</span> <span class="title">set</span> host = '%' where <span class="keyword">user</span> <span class="title">= 'root</span>' <span class="keyword">and</span> host = 'localhost';</span><br></pre></td></tr></table></figure><h3 id="授权指令"><a href="#授权指令" class="headerlink" title="授权指令"></a>授权指令</h3><p>mysql提供了grant指令来实现一些常用的授权，比如限制指定用户访问指定的表，权限(只读、写等)。<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root用户允许任何机器连接到mysql服务器，密码<span class="number">123456</span>，使用以下指令</span><br><span class="line">mysql&gt; grant <span class="literal">all</span> privileges <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'root'</span>@<span class="string">'%'</span> idenified <span class="keyword">by</span> <span class="string">'12345'</span> <span class="keyword">with</span> grant option;</span><br><span class="line"></span><br><span class="line">jack用户从ip地址为<span class="number">10.10</span><span class="number">.25</span><span class="number">.126</span>的主机连接到mysql服务器，密码<span class="number">123456</span>，使用以下指令</span><br><span class="line">mysql&gt; grant <span class="literal">all</span> privileges <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'jack'</span>@<span class="string">'10.10.25.126'</span> identified <span class="keyword">by</span> <span class="string">'123456'</span> <span class="keyword">with</span> grant option;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql安装默认的root账户没有密码，所以登录mysql需要通过mysql -uroot -h 127.0.0.1 -P 3306登录后，设置密码。&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="http://lehoon.cn/categories/orther/"/>
    
    
      <category term="mysql" scheme="http://lehoon.cn/tags/mysql/"/>
    
      <category term="密码" scheme="http://lehoon.cn/tags/%E5%AF%86%E7%A0%81/"/>
    
      <category term="远程访问" scheme="http://lehoon.cn/tags/%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/"/>
    
  </entry>
  
  <entry>
    <title>Intellij-idea文件格式化</title>
    <link href="http://lehoon.cn/orther/2017/06/19/idea-file-format.html"/>
    <id>http://lehoon.cn/orther/2017/06/19/idea-file-format.html</id>
    <published>2017-06-19T02:13:07.000Z</published>
    <updated>2018-09-22T13:30:40.116Z</updated>
    
    <content type="html"><![CDATA[<p>在使用idea过程中，最大的问题就是在eclipse中有格式化代码的快捷方式，但是在idea中一直没有找到怎么能快捷格式文件。后来才发现idea中有插件可以是实现，插件名称是Eclipse Code Formatter，这个可以从Intellij的插件仓库中安装，安装之后就可以使用文件格式功能了。<br><a id="more"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>打开idea的文件设置功能，选择插件面板。<br>路径：file—&gt;setting—&gt;plugins—&gt;Install JetBrains plugin<br>打开插件列表窗口后，在输入栏里面输入Eclipse Code Formatter后，查询出来后，选择安装即可。</p><h2 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h2><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>file—&gt;Other Setting—&gt;Eclipse Code Formmatter</p><h3 id="设置参数"><a href="#设置参数" class="headerlink" title="设置参数"></a>设置参数</h3><p>打开eclipse Code Formatter设置窗口后，点击启用(use the eclipse code formatter),选中eclipse的格式化模板文件即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用idea过程中，最大的问题就是在eclipse中有格式化代码的快捷方式，但是在idea中一直没有找到怎么能快捷格式文件。后来才发现idea中有插件可以是实现，插件名称是Eclipse Code Formatter，这个可以从Intellij的插件仓库中安装，安装之后就可以使用文件格式功能了。&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="http://lehoon.cn/categories/orther/"/>
    
    
      <category term="intellij" scheme="http://lehoon.cn/tags/intellij/"/>
    
      <category term="idea" scheme="http://lehoon.cn/tags/idea/"/>
    
      <category term="格式化" scheme="http://lehoon.cn/tags/%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    
  </entry>
  
</feed>
